{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W-MkNeI0XBAn"
      },
      "source": [
        "Joaquin Tejo\\\n",
        "Jorge Corro\\\n",
        "DDB Assignment IV\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4rOslmKJXLk7"
      },
      "source": [
        "## Pre-requisites:\n",
        "\n",
        "\n",
        "High level requirements of Python library.\n",
        "\n",
        "    - Pytorch\n",
        "    - HuggingFace Transformers library\n",
        "    - Pandas\n",
        "    - Numpy\n",
        "    - Sklearn"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pTE7zpN4XVH5"
      },
      "source": [
        "On terminal\n",
        "\n",
        "conda install pytorch\\\n",
        "conda install -c huggingface transformers\\\n",
        "conda install -c huggingface huggingface_hub\\\n",
        "conda install datasets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "60u_RjtPtxIn",
        "outputId": "4b8ac30a-eb88-40c0-dde5-c905a593a03a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "zsh:1: 0.20.1 not found\n",
            "Collecting accelerate\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Downloading accelerate-0.27.2-py3-none-any.whl.metadata (18 kB)\n",
            "Requirement already satisfied: numpy>=1.17 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from accelerate) (1.23.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from accelerate) (23.2)\n",
            "Requirement already satisfied: psutil in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from accelerate) (5.9.7)\n",
            "Requirement already satisfied: pyyaml in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from accelerate) (6.0.1)\n",
            "Requirement already satisfied: torch>=1.10.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from accelerate) (2.1.2)\n",
            "Requirement already satisfied: huggingface-hub in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from accelerate) (0.20.3)\n",
            "Collecting safetensors>=0.3.1 (from accelerate)\n",
            "  Downloading safetensors-0.4.2-cp310-cp310-macosx_11_0_arm64.whl.metadata (3.8 kB)\n",
            "Requirement already satisfied: filelock in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.13.1)\n",
            "Requirement already satisfied: typing-extensions in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (4.9.0)\n",
            "Requirement already satisfied: sympy in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (1.11.1)\n",
            "Requirement already satisfied: networkx in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (2.8.4)\n",
            "Requirement already satisfied: jinja2 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.1.3)\n",
            "Requirement already satisfied: fsspec in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (2023.10.0)\n",
            "Requirement already satisfied: requests in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from huggingface-hub->accelerate) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from huggingface-hub->accelerate) (4.64.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from jinja2->torch>=1.10.0->accelerate) (2.1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (2023.11.17)\n",
            "Requirement already satisfied: mpmath>=0.19 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages/mpmath-1.2.1-py3.10.egg (from sympy->torch>=1.10.0->accelerate) (1.2.1)\n",
            "Downloading accelerate-0.27.2-py3-none-any.whl (279 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m280.0/280.0 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n",
            "\u001b[?25hDownloading safetensors-0.4.2-cp310-cp310-macosx_11_0_arm64.whl (393 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m393.4/393.4 kB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: safetensors, accelerate\n",
            "Successfully installed accelerate-0.27.2 safetensors-0.4.2\n",
            "zsh:1: no matches found: transformers[torch]\n",
            "Requirement already satisfied: datasets in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (2.17.0)\n",
            "Requirement already satisfied: filelock in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (3.13.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (1.23.5)\n",
            "Requirement already satisfied: pyarrow>=12.0.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (15.0.0)\n",
            "Requirement already satisfied: pyarrow-hotfix in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (0.6)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (0.3.8)\n",
            "Requirement already satisfied: pandas in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (1.5.3)\n",
            "Requirement already satisfied: requests>=2.19.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.62.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (4.64.1)\n",
            "Requirement already satisfied: xxhash in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (3.4.1)\n",
            "Requirement already satisfied: multiprocess in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (0.70.15)\n",
            "Requirement already satisfied: fsspec<=2023.10.0,>=2023.1.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from fsspec[http]<=2023.10.0,>=2023.1.0->datasets) (2023.10.0)\n",
            "Requirement already satisfied: aiohttp in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (3.9.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.19.4 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (0.20.3)\n",
            "Requirement already satisfied: packaging in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (23.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from datasets) (6.0.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from aiohttp->datasets) (23.2.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from aiohttp->datasets) (6.0.4)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from aiohttp->datasets) (1.9.4)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from aiohttp->datasets) (1.4.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from aiohttp->datasets) (1.3.1)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from aiohttp->datasets) (4.0.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets) (4.9.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (2023.11.17)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from pandas->datasets) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from pandas->datasets) (2023.3.post1)\n",
            "Requirement already satisfied: six>=1.5 in /Users/joaquintejo/anaconda3/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas->datasets) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install accelerate>=0.20.1\n",
        "!pip install accelerate -U\n",
        "!pip install transformers[torch]\n",
        "!pip install datasets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "x6YiOiUJXzMq"
      },
      "outputs": [],
      "source": [
        "# !pip install torch transformers datasets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "GlOjKyswXNCu"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import transformers\n",
        "from transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer, pipeline, BertTokenizer, BertForSequenceClassification\n",
        "import torch\n",
        "from torch.utils.data import TensorDataset, Dataset, DataLoader\n",
        "\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "import re\n",
        "import string\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer # We use it to standardize the Features matrix\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats, sparse\n",
        "\n",
        "import sklearn\n",
        "from sklearn.model_selection import train_test_split, cross_val_score, KFold\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_recall_fscore_support\n",
        "\n",
        "import statsmodels.api as sm\n",
        "\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from datasets import load_dataset\n",
        "\n",
        "# KNN\n",
        "from matplotlib.colors import ListedColormap\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "\n",
        "# RF\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Finbert\n",
        "import random\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NWck7mdNXin-"
      },
      "source": [
        "Step 1: Pulling the data together\n",
        "Download and inspect the data from the various sources:\n",
        "\n",
        "Financial Phrasebank https://huggingface.co/datasets/financial_phrasebank. Humanly annotated\n",
        "\n",
        "Financial tweets topics dataset: https://huggingface.co/datasets/zeroshot/twitter-financial-news-topic/viewer/default/train?p=169. Humanly annotated\n",
        "\n",
        "Think of any pre-processing functions ( Converting the text to lowercase, removing punctuation, tokenizing the text, removing stop words and empty strings, lemmatizing tokens. ) that you might need to apply for downstream tasks. As always, pick a framework for data analysis and data exploration."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560,
          "referenced_widgets": [
            "3e4d45d97d044818a47d27e8fcf91bfb",
            "d893e2c9b916482e9d015a1dc6c7dc94",
            "62c1651021344ed18a4dc8b7f0fe3cfe",
            "cddf10e921ed4d058a6edc95a08d2e46",
            "9fce8ce4b6e44ccd8c1c1979dc23a382",
            "7de422a2681f45a28ced5fb598949d3a",
            "8f29b44a6efb4393ac23f61c93633958",
            "e214be4b37ee4f7d8fd89956f2eca860",
            "0eae23c27bb2438a959bb0081d36d93a",
            "531367c5892b467d866bddd43ccd6d37",
            "fa720d8e72654303a1dcd2073415dcbb",
            "8cd2f177dc8348739ab1dfd9a3f6b4b0",
            "8c9e78234000468780215ce98c1c82c4",
            "343808aa181b493dad95b4d5982c3ea1",
            "d40cdb76f1c14bff8da71b26ab2b1162",
            "bd0522babebc46d3a4ff272caab00fcd",
            "3f8e5960081b41d9b29608d05822034c",
            "eb751fa48e494f63b6851e8e9466ac4a",
            "e4a0b14a5d1748dfb17640395e2f6fe2",
            "958953046066497dab92d823ec867b35",
            "07177f0b99804028aa0c05584de7aaa9",
            "dc950c3f466249d2ac648bb8de8cbec4",
            "c9735d3453a74eddaccda82dbccbc158",
            "845e3876fb7746fb9adc4fc687e91f10",
            "9dca2058a626458fb310f7e50f907547",
            "60abc0396aeb4b609c03be1b829f2b9d",
            "253e0455dfaa4410b7d3c38e645abbf9",
            "5595d05c6cdd4684ae9eb9beb14b7b8b",
            "8e5d17dbb31d4623be6d4ac50c0fdd61",
            "bdeb354b47694d4694bf52cf33b00015",
            "147e4c3c18b74093b02692e2d27647d5",
            "1d5ee2ca3f9542f186e7b9fa5121079c",
            "027fd11f26e241c8a7a56ec50490b47a",
            "ca0bf417b1f243cd826dddd127557734",
            "ffeedd08e56c4c2a94e1752b20e2c138",
            "51af4667a5f74bff8a26ff63f1eb8f89",
            "65ae71406b2d480db81ce1688549e06c",
            "48b72fb4e59c4565a26b3cb96e0b3355",
            "b6f9c2501a7b4fefb989af60b240d760",
            "ed8b24b4861c4c3fb6e1ad986f0ace8c",
            "acbae24602a94eb9a9f5de68d346ccbb",
            "634da0f8e59e49d59edda19527ecea72",
            "ee817ac02f9741ebbedf1a4d818fe8e2",
            "e352d17a9b4e4c52b9ea337d09170b29",
            "e2c5db8544a94909b8c6dfe5f21daef1",
            "91f260a09a2441dfb1c079e2bee3c60c",
            "21d520cf0fbc432792952c6dcf6d6211",
            "f7bd1a44785944e59cb99159282e0373",
            "3d4a63d052c440d7921744f988ec55bc",
            "bb9e4cc9f77d4224b7a226c779640bf4",
            "a589c9153e3543469c6e835508992db5",
            "a2f52464d25a43f088db7ea00f1bba2d",
            "fc9bb5f4478e4065b468f81b57364a29",
            "459b41349b1642518da1e936f82027cf",
            "71453af887b6425cb6401ec2a4a8819b",
            "fe7d790d29ff42f08a1e365d459dfa7a",
            "d3462fa932df493c881b642f11b31e3f",
            "7d92ea49afab43c58454588f24c45e0f",
            "08fa21bf5efa48e58e5e44a1309ceff9",
            "13ce282cbe8548a29b5a53e1afaa8633",
            "8e212c14cc044cc69f1d5c85388d308c",
            "0c8aa381b2854e18aed3390d311cea4a",
            "bf45f1e2c4bb4b2597ce75d8b788f0e9",
            "ac5c1d441b7547afa80d502c5807abfd",
            "7d2469ad16034fc98d7150fd1c1ef949",
            "48e961e70fb843ee9a6456be125eeab1",
            "668d79c9c51947c5931e5871da6bdd4a",
            "3a2683a29df043888778ad7c9ff112f1",
            "a85512188b21475aaa503155e41e86d3",
            "5b994a2e540446ba821c440f6b45e007",
            "301d41c6353348909fa825cf23c87849",
            "96a0860267cf4499a5880661eacc78cc",
            "a7f49070788b447185b4d631f51dcc71",
            "ac678f8305784d8cad4d97f7053f3753",
            "f55a322d8aba43b7be05d6d64eeda43a",
            "3b72ec7f0c8a472c8e6b270bbcf5105d",
            "be874817a96a4be7bf0f7bee6e4e4a6a",
            "eb9e6f03a4b24ccaae51e3f9f5a61e69",
            "d8e7d86d886e45d4ad7b82a195a0d398",
            "9f9a64ccdba94f379bf5176f66060368",
            "4ff0ef23972b4c42856886ff333edec6",
            "2b57a18a1d47406bb471208cafb77f21",
            "44255f512f14404890228f963a37e6ec",
            "ab02b33993d8449c87763148eafeebc1",
            "9437ebbe2d6b4319bb9c8d7aeb463669",
            "62b318dc35864075a687612582062094",
            "c89e50e414a54f43ae143d49e748056f",
            "6e775595e04b4d1aa683770243d5866d",
            "86df7cb48c9f44f89ba1d6130e80bf6c",
            "7c79e734d9804f3697b10882a6213ecb",
            "69aa7059277445b48b054e0deaa08e42",
            "2b75fa34396e4ce8a213c16bd8d491d9",
            "9a5ba1677e1e439e9799fceb80553240",
            "752ab63b6e8c479aaffa2345525f9176",
            "7835d30a693e4bd4be212746c1167844",
            "53fb110cc39b480592641772c2ea5ea8",
            "d6600d5615fa4609a3627ce6ade2d374",
            "6f4beab452754ff0bede0256fa4fa2f0",
            "2b11bf5279ad409496e96462c12d6c33",
            "6f5f5949250d467ead4a5563d679d127",
            "ba783416639e4ac3bbab5d748e265fe5",
            "52d93dfc80994f858cbf465fe9203bc2",
            "97c1dd9aae44407dbe479445b79f6f9c",
            "024bdc16f29a4304979a7292f8134428",
            "65eb64ea17a7405abb6b47e749f665bf",
            "2b32bfcba135463da0dab9ac856abe90",
            "0ba03fd4c2264336baff865043121f69",
            "37c9b2ed7b8c44cb834090615a9693ec",
            "ff6a326f34644cd0ab69ac273ef0bac6",
            "0d2ffbc379b446ce82eff3e916d3c51f",
            "3bc4feb176d14034a2171eac7b4d7da3",
            "d85574f861604b4f85a276e8eef392fa",
            "84b458407b2b4a62bba9e34caa66c916",
            "5a9203ea2a774a2fb02e7484d0027d59",
            "072b063d078749fcaa583df2d749e54b",
            "79cb9cbcc62d4cf495d9a84098a1e266",
            "11a88705a38b4dada31dad7624454b28",
            "977dc5c855ae40b3bcf2166229e49a91",
            "525c47ae803742ee827f5bdb04fdd9ba",
            "2f733b599ab64e6cb3963d93768323b1",
            "c44ce418a6cf47bb976bf940f1534306",
            "143115e7d7c94d10a1bbdb11ab66799a",
            "f6b7f1a46697439e9c56d14021172ae6",
            "0aeebe04ce6940a6b3614180e3c7d7c6",
            "546f0da33a904a9fa10366236bb33547",
            "df6288c69c85439996ed9cbaa26c303e",
            "f826858e94a6413783bbfdbdacee8f96",
            "038f66c2578d444da6b5e9e4b80032a0",
            "80b667d0db2b4334959822046321b1c5",
            "d4a7082753354bc4a6989b279af92e51",
            "ddc57359144f4da0843a107063ddc798",
            "63a25d61e19549baade1f1bc890d0869",
            "1adcd45dc4974d83a7497780f2d679ff",
            "ab72a2a199e94427a297ccb22f344142",
            "b3565829ef9a4607b666b7293d595010",
            "7b2da76610324c699ffe7585dde61d73",
            "4433bf8c1fef4ef680d6106d9d4796c7",
            "cdf7a35805b14b66b477f215713e898a",
            "f739dc74afab4fbf8192ec7aa3a4cb5b",
            "11e4ab2a114f46bbb3a5ee3d3223df67",
            "4ceb5520e24a461eb90b71d769d2dfb0",
            "fd10e4d4335349b084aa1049309ba821",
            "f18efe5b66fc44c7bb0a49c2d70e05cd"
          ]
        },
        "id": "Bcm-rxyWXEZs",
        "outputId": "6563e3bf-3716-4ff5-f224-508381a8619c"
      },
      "outputs": [],
      "source": [
        "financial_phrasebank = load_dataset(\"financial_phrasebank\", \"sentences_allagree\")['train'].to_pandas()\n",
        "df_50agree = load_dataset(\"financial_phrasebank\", \"sentences_50agree\")['train'].to_pandas()\n",
        "df_66agree = load_dataset(\"financial_phrasebank\", \"sentences_66agree\")['train'].to_pandas()\n",
        "df_75agree = load_dataset(\"financial_phrasebank\", \"sentences_75agree\")['train'].to_pandas()\n",
        "financial_tweets_topics = load_dataset(\"zeroshot/twitter-financial-news-topic\", split='train')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "cDdDi6-5Ygxq",
        "outputId": "dfb8e28f-a681-4a44-a2d8-65fc2155be15"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sentence</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>According to Gran , the company has no plans t...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>For the last quarter of 2010 , Componenta 's n...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>In the third quarter of 2010 , net sales incre...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Operating profit rose to EUR 13.1 mn from EUR ...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Operating profit totalled EUR 21.1 mn , up fro...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                            sentence  label\n",
              "0  According to Gran , the company has no plans t...      1\n",
              "1  For the last quarter of 2010 , Componenta 's n...      2\n",
              "2  In the third quarter of 2010 , net sales incre...      2\n",
              "3  Operating profit rose to EUR 13.1 mn from EUR ...      2\n",
              "4  Operating profit totalled EUR 21.1 mn , up fro...      2"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(type(financial_phrasebank))\n",
        "financial_phrasebank.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Pfi7RnVpb22e",
        "outputId": "22a34ed0-fbe4-4f83-d7fc-272e18d2b538"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sentence</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2259</th>\n",
              "      <td>Operating result for the 12-month period decre...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2260</th>\n",
              "      <td>HELSINKI Thomson Financial - Shares in Cargote...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2261</th>\n",
              "      <td>LONDON MarketWatch -- Share prices ended lower...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2262</th>\n",
              "      <td>Operating profit fell to EUR 35.4 mn from EUR ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2263</th>\n",
              "      <td>Sales in Finland decreased by 10.5 % in Januar...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               sentence  label\n",
              "2259  Operating result for the 12-month period decre...      0\n",
              "2260  HELSINKI Thomson Financial - Shares in Cargote...      0\n",
              "2261  LONDON MarketWatch -- Share prices ended lower...      0\n",
              "2262  Operating profit fell to EUR 35.4 mn from EUR ...      0\n",
              "2263  Sales in Finland decreased by 10.5 % in Januar...      0"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "financial_phrasebank.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NkTDrYv-cBDm",
        "outputId": "7d61345f-997d-4c8e-a0aa-15a5e5e10376"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The sentences all agree shape is: (2264, 2)\n",
            "The 50% annotator agreement shape is: (4846, 2)\n",
            "The 66% annotator agreement shape is: (4217, 2)\n",
            "The 75% annotator agreement shape is: (3453, 2)\n"
          ]
        }
      ],
      "source": [
        "print(f'The sentences all agree shape is: {financial_phrasebank.shape}')\n",
        "print(f'The 50% annotator agreement shape is: {df_50agree.shape}')\n",
        "print(f'The 66% annotator agreement shape is: {df_66agree.shape}')\n",
        "print(f'The 75% annotator agreement shape is: {df_75agree.shape}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LEXmV7b2YgVB",
        "outputId": "5dac92d0-08e9-4b9b-b1ac-8dd7ed09ed06"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The sentences all agree: [1 2 0]\n",
            "The 50% annotator agreement: [1 0 2]\n",
            "The 66% annotator agreement: [1 2 0]\n",
            "The 75% annotator agreement: [1 2 0]\n",
            "\n",
            "We can see that the four dataset have the same labels, where:\n",
            "* 0 means negative:\n",
            "* 1 refers to neutral and,\n",
            "* 2 positive\n",
            "\n"
          ]
        }
      ],
      "source": [
        "d = financial_phrasebank['label'].unique()\n",
        "d55 = df_50agree['label'].unique()\n",
        "d66 = df_66agree['label'].unique()\n",
        "d75 = df_75agree['label'].unique()\n",
        "\n",
        "print(f'The sentences all agree: {d}')\n",
        "print(f'The 50% annotator agreement: {d55}')\n",
        "print(f'The 66% annotator agreement: {d66}')\n",
        "print(f'The 75% annotator agreement: {d75}')\n",
        "\n",
        "print('''\\nWe can see that the four dataset have the same labels, where:\n",
        "* 0 means negative:\n",
        "* 1 refers to neutral and,\n",
        "* 2 positive\n",
        "''')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "mGAQ6iCJaFC3"
      },
      "outputs": [],
      "source": [
        "d_0 = financial_phrasebank['label'][financial_phrasebank['label'] == 0].count()\n",
        "d_1 = financial_phrasebank['label'][financial_phrasebank['label'] == 1].count()\n",
        "d_2 = financial_phrasebank['label'][financial_phrasebank['label'] == 2].count()\n",
        "\n",
        "\n",
        "d55_0 = df_50agree['label'][df_50agree['label'] == 0].count()\n",
        "d55_1 = df_50agree['label'][df_50agree['label'] == 1].count()\n",
        "d55_2 = df_50agree['label'][df_50agree['label'] == 2].count()\n",
        "\n",
        "\n",
        "d66_0 = df_66agree['label'][df_66agree['label'] == 0].count()\n",
        "d66_1 = df_66agree['label'][df_66agree['label'] == 1].count()\n",
        "d66_2 = df_66agree['label'][df_66agree['label'] == 2].count()\n",
        "\n",
        "\n",
        "d75_0 = df_75agree['label'][df_75agree['label'] == 0].count()\n",
        "d75_1 = df_75agree['label'][df_75agree['label'] == 1].count()\n",
        "d75_2 = df_75agree['label'][df_75agree['label'] == 2].count()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "Fo3eGy32pNoO"
      },
      "outputs": [],
      "source": [
        "d_c = financial_phrasebank['label'].count()\n",
        "d55_c = df_50agree['label'].count()\n",
        "d66_c = df_66agree['label'].count()\n",
        "d75_c = df_75agree['label'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "QTaTjxKhkc6T",
        "outputId": "8e976209-eed1-4db2-c4cb-32bfe8c8c03e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Label</th>\n",
              "      <th>All Agree</th>\n",
              "      <th>% part. Allerge</th>\n",
              "      <th>50% Agree</th>\n",
              "      <th>% part. 50%</th>\n",
              "      <th>66% Agree</th>\n",
              "      <th>% part. 66%</th>\n",
              "      <th>75% Agree</th>\n",
              "      <th>% part. 75%</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0 - Negative</td>\n",
              "      <td>303</td>\n",
              "      <td>13.383392</td>\n",
              "      <td>604</td>\n",
              "      <td>12.463888</td>\n",
              "      <td>514</td>\n",
              "      <td>12.188760</td>\n",
              "      <td>420</td>\n",
              "      <td>12.163336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1 - Neutral</td>\n",
              "      <td>1391</td>\n",
              "      <td>61.439929</td>\n",
              "      <td>2879</td>\n",
              "      <td>59.409823</td>\n",
              "      <td>2535</td>\n",
              "      <td>12.188760</td>\n",
              "      <td>2146</td>\n",
              "      <td>62.148856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2 - Positive</td>\n",
              "      <td>570</td>\n",
              "      <td>25.176678</td>\n",
              "      <td>1363</td>\n",
              "      <td>28.126290</td>\n",
              "      <td>1168</td>\n",
              "      <td>27.697415</td>\n",
              "      <td>887</td>\n",
              "      <td>25.687808</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          Label  All Agree  % part. Allerge  50% Agree  % part. 50%  \\\n",
              "0  0 - Negative        303        13.383392        604    12.463888   \n",
              "1   1 - Neutral       1391        61.439929       2879    59.409823   \n",
              "2  2 - Positive        570        25.176678       1363    28.126290   \n",
              "\n",
              "   66% Agree  % part. 66%  75% Agree  % part. 75%  \n",
              "0        514    12.188760        420    12.163336  \n",
              "1       2535    12.188760       2146    62.148856  \n",
              "2       1168    27.697415        887    25.687808  "
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "\n",
        "comparative = {\n",
        "                  'Label': ['0 - Negative', '1 - Neutral', '2 - Positive'],\n",
        "                  'All Agree': [d_0, d_1, d_2],\n",
        "                  '% part. Allerge': [d_0/d_c * 100, d_1/d_c * 100, d_2/d_c * 100],\n",
        "\n",
        "                  '50% Agree': [d55_0, d55_1, d55_2],\n",
        "                  '% part. 50%': [d55_0/d55_c * 100, d55_1/d55_c * 100, d55_2/d55_c * 100],\n",
        "\n",
        "                  '66% Agree': [d66_0, d66_1, d66_2],\n",
        "                  '% part. 66%': [d66_0/d66_c * 100, d66_0/d66_c * 100, d66_2/d66_c * 100],\n",
        "\n",
        "                  '75% Agree': [d75_0, d75_1, d75_2],\n",
        "                  '% part. 75%': [d75_0/d75_c * 100, d75_1/d75_c * 100, d75_2/d75_c * 100],\n",
        "                    }\n",
        "df_comparative = pd.DataFrame(comparative)\n",
        "df_comparative\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cVJuL558WHAP"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PFfak8SNU76O",
        "outputId": "99278f12-9e93-4615-cd78-1dfce5d6c20d"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to\n",
            "[nltk_data]     /Users/joaquintejo/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to\n",
            "[nltk_data]     /Users/joaquintejo/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to\n",
            "[nltk_data]     /Users/joaquintejo/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package omw-1.4 to\n",
            "[nltk_data]     /Users/joaquintejo/nltk_data...\n",
            "[nltk_data]   Package omw-1.4 is already up-to-date!\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('omw-1.4')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "YDv_6N2wVICe"
      },
      "outputs": [],
      "source": [
        "lemmatizer = WordNetLemmatizer()\n",
        "stop_words = set(stopwords.words('english'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "E46jTGcRnZnA"
      },
      "outputs": [],
      "source": [
        "\n",
        "def preprocess_text(text):\n",
        "\n",
        "    text = text.lower()\n",
        "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
        "    tokens = word_tokenize(text)\n",
        "    tokens = [word for word in tokens if word not in stop_words and word != \"\"]\n",
        "    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
        "    return ' '.join(tokens)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "THcm6VOmW6Kx",
        "outputId": "2957e534-12f4-493e-955f-265a8fc7da8b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'cat like eat fish sleeping'"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "preprocess_text(\"I am a cat. I like to eat fish. I am sleeping.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "P5W6WkhZGF73"
      },
      "outputs": [],
      "source": [
        "financial_phrasebank['processed_text'] = financial_phrasebank['sentence'].apply(preprocess_text)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Vpyf7_avGFwr",
        "outputId": "4c9a29b0-1e6f-4391-ec0f-8f83db0026f1"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sentence</th>\n",
              "      <th>label</th>\n",
              "      <th>processed_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>According to Gran , the company has no plans t...</td>\n",
              "      <td>1</td>\n",
              "      <td>according gran company plan move production ru...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>For the last quarter of 2010 , Componenta 's n...</td>\n",
              "      <td>2</td>\n",
              "      <td>last quarter 2010 componenta net sale doubled ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>In the third quarter of 2010 , net sales incre...</td>\n",
              "      <td>2</td>\n",
              "      <td>third quarter 2010 net sale increased 52 eur 2...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Operating profit rose to EUR 13.1 mn from EUR ...</td>\n",
              "      <td>2</td>\n",
              "      <td>operating profit rose eur 131 mn eur 87 mn cor...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Operating profit totalled EUR 21.1 mn , up fro...</td>\n",
              "      <td>2</td>\n",
              "      <td>operating profit totalled eur 211 mn eur 186 m...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                            sentence  label  \\\n",
              "0  According to Gran , the company has no plans t...      1   \n",
              "1  For the last quarter of 2010 , Componenta 's n...      2   \n",
              "2  In the third quarter of 2010 , net sales incre...      2   \n",
              "3  Operating profit rose to EUR 13.1 mn from EUR ...      2   \n",
              "4  Operating profit totalled EUR 21.1 mn , up fro...      2   \n",
              "\n",
              "                                      processed_text  \n",
              "0  according gran company plan move production ru...  \n",
              "1  last quarter 2010 componenta net sale doubled ...  \n",
              "2  third quarter 2010 net sale increased 52 eur 2...  \n",
              "3  operating profit rose eur 131 mn eur 87 mn cor...  \n",
              "4  operating profit totalled eur 211 mn eur 186 m...  "
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "financial_phrasebank.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ySI3hs-QGN1n"
      },
      "source": [
        "Lets make some EDA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oLC2FtEbGK5k",
        "outputId": "24e40ab5-857f-41a9-f5b7-9aa887fc7798"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "count    2264.000000\n",
            "mean       88.784894\n",
            "std        44.232954\n",
            "min         0.000000\n",
            "25%        55.000000\n",
            "50%        80.000000\n",
            "75%       115.000000\n",
            "max       251.000000\n",
            "Name: processed_text_length, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "financial_phrasebank['processed_text_length'] = financial_phrasebank['processed_text'].apply(len)\n",
        "print(financial_phrasebank['processed_text_length'].describe())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "eIRAvENqGK2O",
        "outputId": "14965055-db8f-4337-9bbd-68efeb3ffb6d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.hist(financial_phrasebank['processed_text_length'], bins=30)\n",
        "plt.xlabel('Length of Processed Text')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ttCAiNRkGKzV",
        "outputId": "00db558d-3e87-4577-8905-0e4ccaf56551"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['according gran company plan move production russia although company growing',\n",
              " 'last quarter 2010 componenta net sale doubled eur131m eur76m period year earlier moved zero pretax profit pretax loss eur7m',\n",
              " 'third quarter 2010 net sale increased 52 eur 2055 mn operating profit 349 eur 235 mn',\n",
              " 'operating profit rose eur 131 mn eur 87 mn corresponding period 2007 representing 77 net sale',\n",
              " 'operating profit totalled eur 211 mn eur 186 mn 2007 representing 97 net sale',\n",
              " 'finnish talentum report operating profit increased eur 205 mn 2005 eur 93 mn 2004 net sale totaled eur 1033 mn eur 964 mn',\n",
              " 'clothing retail chain seppñlñ sale increased 8 eur 1552 mn operating profit rose eur 311 mn eur 171 mn 2004',\n",
              " 'consolidated net sale increased 16 reach eur74 8 operating profit amounted eur0 9 compared loss eur0 7 prior year period',\n",
              " 'foundry division report sale increased 97 eur 631 mn eur 575 mn corresponding period 2006 sale machine shop division increased 164 eur 412 mn eur 354 mn corresponding period 2006',\n",
              " 'helsinki afx share closed higher led nokia announced plan team sanyo manufacture 3g handset nokian tyre fourthquarter earnings report beat analyst expectation dealer said']"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "\n",
        "X = financial_phrasebank['sentence']\n",
        "y = financial_phrasebank['label']\n",
        "X_preprocessed = [preprocess_text(text) for text in X]\n",
        "X_preprocessed[:10]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B7-8OVtTsQ5f"
      },
      "source": [
        "# Regression Logistic using Scikit-Learn"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ENY49pjgY7J8"
      },
      "source": [
        "### Encode the labels into integers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "78itqqYHHAgg"
      },
      "outputs": [],
      "source": [
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "RWC5VsHasfXb"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train_lr, y_test_lr = train_test_split(X, y, test_size=0.2, random_state=127)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SWdKuyRLs-dl"
      },
      "source": [
        "<a id=\"caso_entrenamiento\"></a>\n",
        "### Model tuning\n",
        "Let's remember that the Scikit-Learn logistic regression implementation applies regularization by default with the hyperparameter C, so it will be important to standardize the data before fitting the model.\n",
        "\n",
        "By standardizing the features to have mean 0 and variance 1, it puts all the features on a common scale. This allows the regularization penalty to be applied evenly to all coefficients.\n",
        "\n",
        "So standardization removes the dependence of the penalty on the original feature scaling. This results in better, more even regularization of the model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "dIWJpgndasrl"
      },
      "outputs": [],
      "source": [
        "tfidf_vectorizer = TfidfVectorizer(max_features=1000)\n",
        "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
        "X_test_tfidf = tfidf_vectorizer.transform(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "4E6soSk2vM_Y",
        "outputId": "b46905ee-4dcd-4b6b-e318-dd3e65eabc0b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "LogisticRegression(max_iter=1000)"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "logistic_regression = LogisticRegression(max_iter=1000)\n",
        "logistic_regression.fit(X_train_tfidf, y_train_lr)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LP9AR6XeEXWP",
        "outputId": "8082a50f-da26-454e-dca8-171890f4fcd4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[-0.18582102 -0.50758318 -0.32259733 ...  0.14400025  0.06738498\n",
            "  -0.15071784]\n",
            " [ 0.20613093  0.12924455 -0.23237572 ... -0.28121432  0.0530125\n",
            "  -0.12857663]\n",
            " [-0.02030991  0.37833863  0.55497305 ...  0.13721407 -0.12039748\n",
            "   0.27929447]]\n",
            "[-1.11769164  1.52239433 -0.40470269]\n"
          ]
        }
      ],
      "source": [
        "# and printing the the parameters\n",
        "print(logistic_regression.coef_)\n",
        "print(logistic_regression.intercept_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J_o0rbDhbLHi",
        "outputId": "16120eec-338c-4a05-d36f-92c48b2721d1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The train accuracy is: 0.91\n"
          ]
        }
      ],
      "source": [
        "# Evaluate what accuracy we obtain in train\n",
        "print(f'The train accuracy is: {accuracy_score(y_train_lr, logistic_regression.predict(X_train_tfidf)).round(2)}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "vP-2LO3NvM81"
      },
      "outputs": [],
      "source": [
        "# We make predictions of our trained model\n",
        "y_train_pred_lr = logistic_regression.predict(X_train_tfidf)\n",
        "y_test_pred_lr = logistic_regression.predict(X_test_tfidf)      # Notice that we should scalar test data before make predictions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sieo2i7iJ58R",
        "outputId": "bcced9ee-3bad-4776-e60c-ae142b4a1d61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The test accuracy is: 0.86\n"
          ]
        }
      ],
      "source": [
        "print(f'The test accuracy is: {accuracy_score(y_test_lr, y_test_pred_lr).round(2)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D6usfqZA7R21"
      },
      "source": [
        "## Confusion Matrix\n",
        "It is a performance measurement tool for machine learning classification. It compares the actual target values with those predicted by the machine learning model.\n",
        "\n",
        "The ideal confusion matrix would have high numbers down the diagonal (indicating many correct predictions) and low numbers off the diagonal (indicating few misclassifications).\n",
        "\n",
        "Some details:\n",
        "\n",
        "* True Positive (TP): The cases in which the model correctly predicted the positive class.\n",
        "* True Negative (TN): The cases in which the model correctly predicted the negative class. This would apply to the other classes when they are considered negative in a one-vs-rest interpretation.\n",
        "* False Positive (FP): The cases in which the model incorrectly predicted the positive class.\n",
        "* False Negative (FN): The cases in which the model incorrectly predicted the negative class."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "9WbM8OjXwGFS",
        "outputId": "8a872703-5d65-42f8-ebca-127c37536169"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "confusion_matrix(y_test_lr, y_test_pred_lr)\n",
        "sns.heatmap(confusion_matrix(y_test_lr, y_test_pred_lr), annot=True, fmt='g', cmap=\"Blues\")\n",
        "plt.ylabel('True Labels')\n",
        "plt.xlabel('Logistic Regression - Projected');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4JYEImU_HApn",
        "outputId": "193649c1-b2a2-411d-ef86-edfc7ef5a625"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.59      0.70        59\n",
            "           1       0.86      0.97      0.91       287\n",
            "           2       0.83      0.70      0.76       107\n",
            "\n",
            "    accuracy                           0.86       453\n",
            "   macro avg       0.85      0.75      0.79       453\n",
            "weighted avg       0.86      0.86      0.85       453\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(y_test_lr, y_test_pred_lr))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IiPtBLA87IVL"
      },
      "source": [
        "Here's the breakdown:\n",
        "\n",
        "- Class 0 - Negative: The model correctly predicted the negatives, 35 times. However, it incorrectly predicted class 0 as class 1 (neutral), 17 times, and as class 2 (positive), 7 times.\n",
        "- Class 1 - Neutral: The model incorrectly predicted neutral as negatives, 1 time, and as positives, 8 times. However, it correctly predicted the neutral, 278 times.\n",
        "- Class 2 - Positive: The model incorrectly predicted the positive as negative, 5 times, and as neutral, 27 times. However, it correctly predicted positive, 75 times.\n",
        "\n",
        "The model seems to perform best in predicting class 1 (neutral), as indicated by the large number of true positives for this class. The model's performance on class 0 (negative) and class 2 (positive) is less accurate, as seen by the lower numbers in the diagonal cells for these classes and the relatively higher numbers in the off-diagonal cells, which indicate misclassifications."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bsOzJ_PUrCi-"
      },
      "source": [
        "# KNN\n",
        "\n",
        "It is a simple supervised machine learning algorithm used for both classification and regression tasks. Also, it uses distance metrics like Euclidean distance to find the nearest neighbors. The choice of distance metric affects performance.\n",
        "\n",
        "\n",
        "To make a prediction for a new data point, KNN finds the K closest data points in the training set and returns the most common output value (for classification) or average of the values (for regression), which K is a hyperparameter that specifies the number of neighboring points to consider in"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "qGFfllRUrCi-"
      },
      "outputs": [],
      "source": [
        "# Based on the final graph, we could conclude that the n_neighbors optimal could be between 15 and 30\n",
        "knn = KNeighborsClassifier(n_neighbors=79)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ph1ZVGcHrCi-"
      },
      "source": [
        "### Dimensionality Reduction\n",
        "One approach is to reduce the dimensionality of your data to two or three principal components using techniques like TruncatedSVD, which is a dimensionality reduction technique that works with sparse matrices."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "bODDBbb9fHRH"
      },
      "outputs": [],
      "source": [
        "\n",
        "vectorizer = TfidfVectorizer()\n",
        "Xv = vectorizer.fit_transform(X)\n",
        "\n",
        "lsa = TruncatedSVD(n_components=2)\n",
        "X_lsa = lsa.fit_transform(Xv)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "dTuLTZVWrCjJ",
        "outputId": "af1dc8be-ce9c-43b1-f64c-40c54f6e1acd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=79)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=79)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=79)"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X_train_pca, X_test_pca, y_train, y_test = train_test_split(X_lsa, y, test_size=0.2, random_state=127)\n",
        "\n",
        "# Adjunting the train data\n",
        "knn.fit(X_train_pca, y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LuspRxvzrCjJ"
      },
      "source": [
        "### Decision boundaries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 754
        },
        "id": "jcJnqlXqrCjJ",
        "outputId": "da1937ad-c7b6-4f19-bd2a-0ffbd3cf52ef"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/3j/w_f12l114_s67h2ynt34h7sw0000gn/T/ipykernel_9444/860895561.py:10: UserWarning: The following kwargs were not used by contour: 's'\n",
            "  plt.contourf(xx, yy, Z, alpha=0.3, s=75)\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "x_min, x_max = X_train_pca[:, 0].min() - 1, X_train_pca[:, 0].max() + 1\n",
        "y_min, y_max = X_train_pca[:, 1].min() - 1, X_train_pca[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),\n",
        "                     np.arange(y_min, y_max, 0.1))\n",
        "\n",
        "Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "plt.figure(figsize=(10,8))\n",
        "plt.contourf(xx, yy, Z, alpha=0.3, s=75)\n",
        "sns.scatterplot(x=X_train_pca[:, 0], y=X_train_pca[:, 1], hue=y_train, alpha=1, edgecolor='k')\n",
        "plt.title(\"Decision Boundary on PCA-reduced Data\")\n",
        "plt.xlabel(\"Principal Component 1\")\n",
        "plt.ylabel(\"Principal Component 2\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bdXOAflvrCjJ"
      },
      "source": [
        "Some comments about the display:\n",
        "\n",
        "- Match between Point Color and Region Color: where the color of the points matches the color of the region they are in, the model is making correct predictions.\n",
        "\n",
        "- Mismatch between Point Color and Region Color: where there is a mismatch, the points are being misclassified by the classifier. For example, if a point with the label '1 or neutral' is located in a region colored for label '0 or negative', it means the classifier is incorrectly predicting that data point.\n",
        "\n",
        "- Overlapping Regions: we can observe that in some areas, multiple classes of points are interspersed and the decision boundaries are not clearly defined. This indicates that the model might struggle to distinguish between these classes due to overlap in the feature space after SVD reduction.\n",
        "\n",
        "- The graph simplify does not show any region for '2 or positive' label."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "ntB0WbiyrCjJ"
      },
      "outputs": [],
      "source": [
        "# Forecasting the labels\n",
        "y_pred = knn.predict(X_test_pca)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "esF0ZwF7oADS",
        "outputId": "8ce683dd-3530-42a2-dc14-99c3ff4a4bad"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Principal Component 1</th>\n",
              "      <th>Principal Component 2</th>\n",
              "      <th>y</th>\n",
              "      <th>y_pred</th>\n",
              "      <th>pred_ok</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>123</th>\n",
              "      <td>0.270816</td>\n",
              "      <td>-0.197529</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>0.011035</td>\n",
              "      <td>-0.024729</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>0.076990</td>\n",
              "      <td>-0.074216</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>0.096699</td>\n",
              "      <td>-0.072029</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>283</th>\n",
              "      <td>0.119122</td>\n",
              "      <td>-0.131211</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.149277</td>\n",
              "      <td>-0.189634</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>0.267349</td>\n",
              "      <td>-0.168244</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>0.143525</td>\n",
              "      <td>-0.098460</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>0.253427</td>\n",
              "      <td>-0.087253</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>447</th>\n",
              "      <td>0.137377</td>\n",
              "      <td>-0.054498</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Principal Component 1  Principal Component 2  y  y_pred  pred_ok\n",
              "123               0.270816              -0.197529  2       2     True\n",
              "51                0.011035              -0.024729  1       1     True\n",
              "85                0.076990              -0.074216  2       1    False\n",
              "105               0.096699              -0.072029  0       1    False\n",
              "283               0.119122              -0.131211  2       1    False\n",
              "14                0.149277              -0.189634  1       1     True\n",
              "90                0.267349              -0.168244  2       2     True\n",
              "107               0.143525              -0.098460  0       2    False\n",
              "147               0.253427              -0.087253  2       2     True\n",
              "447               0.137377              -0.054498  2       2     True"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# We create a table with predictions, indicating whether they were correct or not\n",
        "# Preserving the index to match y_test\n",
        "y_test_series = pd.Series(y_test)\n",
        "y_pred_series = pd.Series(y_pred)\n",
        "\n",
        "X_test_pca_df = pd.DataFrame(X_test_pca)\n",
        "df_pred = pd.concat([X_test_pca_df, y_test_series, y_pred_series, y_test_series==y_pred_series], axis=1)\n",
        "df_pred.columns = ['Principal Component 1', 'Principal Component 2', 'y', 'y_pred', 'pred_ok']\n",
        "df_pred.sample(10)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 726
        },
        "id": "gAiQl6QSrCjJ",
        "outputId": "73408d73-6ef4-42ff-8168-f8db52186e2a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "# Define the size of the figure\n",
        "plt.figure(figsize=(10,8))\n",
        "\n",
        "# Plot the decision boundaries\n",
        "# Create a grid of points that covers the range of the PCA components\n",
        "x_min, x_max = X_train_pca[:, 0].min() - 1, X_train_pca[:, 0].max() + 1\n",
        "y_min, y_max = X_train_pca[:, 1].min() - 1, X_train_pca[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x_min, x_max, .1), np.arange(y_min, y_max, .1))\n",
        "\n",
        "# Predict using the KNN model for each point on the grid\n",
        "Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "# Plot the areas of influence for each class using the grid predictions\n",
        "plt.pcolormesh(xx, yy, Z, cmap=ListedColormap(sns.color_palette(n_colors=3)), alpha=0.2, shading='auto')\n",
        "\n",
        "# Visualize the training data\n",
        "sns.scatterplot(x=X_train_pca[:, 0], y=X_train_pca[:, 1], hue=y_train, alpha=0.3, s=75, legend=None, edgecolor='k')\n",
        "\n",
        "# Visualize the test data with predictions\n",
        "# Use the PCA components from df_pred for x and y coordinates\n",
        "# Use the actual labels (y) and predicted correctness (pred_ok) for hue and style\n",
        "sns.scatterplot(x=df_pred['Principal Component 1'], y=df_pred['Principal Component 2'],\n",
        "                hue=df_pred['y'], style=df_pred['pred_ok'],\n",
        "                palette=sns.color_palette(n_colors=3),\n",
        "                edgecolor='k', linewidth=0.5, alpha=1, s=100)\n",
        "\n",
        "# Define the labels and title of the graph\n",
        "plt.xlabel('$x_1$', fontsize=15)\n",
        "plt.ylabel('$x_2$', fontsize=15)\n",
        "plt.title('Test Set Classifications', fontsize=15)\n",
        "\n",
        "# Display the legend\n",
        "plt.legend(title='Label', loc='upper right')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CN8z6eVxrCjJ",
        "outputId": "42d6f1e1-3b7b-4fc3-b210-9da274c40bf4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.6887417218543046"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# The mean of this serie tells us the proportion of correct classifications\n",
        "df_pred['pred_ok'].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l3NyLp_arCjJ",
        "outputId": "d6195b10-464d-4391-8d7a-d6442650ed31"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.6887417218543046"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "accuracy_score(y_test, y_pred)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rj1cgsOrrCjJ"
      },
      "source": [
        "Now, we know that the generalization capacity of a model depends on a good fit to the training data, without incurring in situations of under-fitting (bias) or over-fitting (variance). With KNN, one way to balance the _trade-off_ between bias and variance is to try different values of the hyperparameter _k_ until you find the right one. Let's first observe what happens to the decision boundaries as the value of _k_ varies:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "id": "BmQxXzY8rCjK",
        "outputId": "9085b2e0-38fa-4781-b083-2891a8ecd574"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 2000x1000 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "# We generate a grid of plots to represent the different decision boundaries\n",
        "fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(20,10), sharex=True, sharey=True)\n",
        "ax = ax.ravel()\n",
        "fig.suptitle('Decision Boundaries for Different k', fontsize=20)\n",
        "\n",
        "# We instantiate over difference values of k\n",
        "for i, k in enumerate([1, 5, 25, 50, 100, 150]):\n",
        "    # Visualizamos los datos de entrenamiento\n",
        "    sns.scatterplot(x=X_train_pca[:, 0], y=X_train_pca[:, 1], hue=y_train, alpha=0.3, s=75, ax=ax[i], legend=False)\n",
        "\n",
        "    # We define a grid of values that cover the entire range of each variable\n",
        "    x_min, x_max = X_train_pca[:, 0].min() - 1, X_train_pca[:, 0].max() + 1\n",
        "    y_min, y_max = X_train_pca[:, 1].min() - 1, X_train_pca[:, 1].max() + 1\n",
        "    xx, yy = np.meshgrid(np.arange(x_min, x_max, .1), np.arange(y_min, y_max, .1))\n",
        "\n",
        "    # We instantiate and train a KNN with n_neighbors=k\n",
        "    knn = KNeighborsClassifier(n_neighbors=k)\n",
        "    knn.fit(X_train_pca, y_train)\n",
        "\n",
        "    # Forecasting\n",
        "    Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "    Z = Z.reshape(xx.shape)\n",
        "\n",
        "    ax[i].pcolormesh(xx, yy, Z, cmap=ListedColormap(sns.color_palette(n_colors=3)), alpha=0.2, shading='auto')\n",
        "    ax[i].set_title(f'k={k}')\n",
        "    ax[i].set_xlabel('Principal Component 1')\n",
        "    ax[i].set_ylabel('Principal Component 2')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.subplots_adjust(top=0.92)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pZFZAqcUrCjK"
      },
      "source": [
        "Conclusions\n",
        "- k=1: The decision boundary is very complex and appears to be overfitting, as it follows the training data very closely. This can result in high variance and low bias, leading to poor generalization to new data.\n",
        "\n",
        "- k=5: The decision boundary is still quite complex, but less so than with k=1. There are fewer \"islands\" of predicted classes, suggesting reduced overfitting.\n",
        "\n",
        "- k=25: Boundaries become smoother, indicating that the classifier is starting to generalize better. It balances the noise against the overall trends in the data.\n",
        "\n",
        "- k=50: Further smoothing of boundaries is visible, and the decision areas are larger and less fragmented.\n",
        "\n",
        "- k=100 and k=150: These plots show even smoother decision boundaries with large regions predicting a single class. However, this could indicate the onset of underfitting, where the model becomes too generalized and may not capture important nuances in the data.\n",
        "\n",
        "Based on these observations, a k value somewhere between 25 and 50 could be a reasonable starting point for the optimal balance, provided that the dataset doesn't have a large number of overlapping classes. However, this is a rough estimate, and the actual optimal k should be determined quantitatively by evaluating the model's performance on a validation set or through cross-validation."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4lvvCpHTrCjK"
      },
      "source": [
        "#### Choosing the optimal value for the hyperparameter `n_neighbors`\n",
        "\n",
        "Now, we are going to train the `KNeighborsClassifier` models by testing several possibles values for the hyperparameter `n_neighbors` within a *cross-validation* scheme"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "yS-gmbXarCjK"
      },
      "outputs": [],
      "source": [
        "'''\n",
        "We are going to want to graph the different values of the cross validation score based on the n_neighbors\n",
        "hyperparameter. For this we generate a list of dictionaries which can then be easily converted to DataFrame.\n",
        "\n",
        "We try all the integers from 1 to 100 as possible values of n_neighbors to explore.\n",
        "'''\n",
        "\n",
        "# We define the cross validation strategy\n",
        "kf = KFold(n_splits=3, shuffle=True, random_state=127)\n",
        "\n",
        "scores_para_df = []\n",
        "\n",
        "for i in range(1, 101):\n",
        "\n",
        "    # In each iteration, we instantiate the model with a different hyperparameter\n",
        "    model = KNeighborsClassifier(n_neighbors=i)\n",
        "\n",
        "    # cross_val_score returns an array of 5 results\n",
        "    # one for each partition that CV automatically made\n",
        "    cv_scores = cross_val_score(model, X_train_pca, y_train, cv=kf)\n",
        "\n",
        "    # For each value of n_neighbors, we create a dictionary with the\n",
        "    # value of n_neighbours and the mean and deviation of the scores\n",
        "    dict_row_score = {'Average Score':np.mean(cv_scores),\n",
        "                      'Std Score':np.std(cv_scores), 'n_neighbors':i}\n",
        "\n",
        "    # We save each one in the dictionary list\n",
        "    scores_para_df.append(dict_row_score)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ry9PZ1mXrCjK",
        "outputId": "419d6a41-cf73-4cdd-85bc-97f9d4d7cac0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   Average Score  Std Score  n_neighbors\n",
            "0       0.626178   0.009777            1\n",
            "1       0.636665   0.002031            2\n",
            "2       0.661519   0.007190            3\n",
            "3       0.680846   0.008968            4\n",
            "4       0.686920   0.009991            5\n",
            "    Average Score  Std Score  n_neighbors\n",
            "95       0.716746   0.019990           96\n",
            "96       0.717298   0.019734           97\n",
            "97       0.715090   0.019989           98\n",
            "98       0.716746   0.019303           99\n",
            "99       0.717297   0.019133          100\n"
          ]
        }
      ],
      "source": [
        "# Creamos el DataFrame a partir de la lista de diccionarios\n",
        "df_scores = pd.DataFrame(scores_para_df)\n",
        "print(f'{df_scores.head()}')\n",
        "print(f'{df_scores.tail()}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-RoEkmz_rCjK"
      },
      "source": [
        "### Graphing the search for the best hyperparameter\n",
        "\n",
        "The _scoring_ value used by `KNeighborsClassifier` by default is the accuracy, the percentage of well-classified cases.\n",
        "\n",
        "Once we have the table with the _performance_ for each value of the hyperparameter, we make a graph with the values obtained. To get an idea of the dispersion, we will also graph the lines that indicate a standard deviation above and below the mean."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "xO5NoxOirCjK",
        "outputId": "60e46482-f74b-4f26-b1b7-36153e023331"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Average Score</th>\n",
              "      <th>Std Score</th>\n",
              "      <th>n_neighbors</th>\n",
              "      <th>lower_lim</th>\n",
              "      <th>upper_lim</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.626178</td>\n",
              "      <td>0.009777</td>\n",
              "      <td>1</td>\n",
              "      <td>0.616401</td>\n",
              "      <td>0.635955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.636665</td>\n",
              "      <td>0.002031</td>\n",
              "      <td>2</td>\n",
              "      <td>0.634634</td>\n",
              "      <td>0.638695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.661519</td>\n",
              "      <td>0.007190</td>\n",
              "      <td>3</td>\n",
              "      <td>0.654329</td>\n",
              "      <td>0.668709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.680846</td>\n",
              "      <td>0.008968</td>\n",
              "      <td>4</td>\n",
              "      <td>0.671878</td>\n",
              "      <td>0.689814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.686920</td>\n",
              "      <td>0.009991</td>\n",
              "      <td>5</td>\n",
              "      <td>0.676929</td>\n",
              "      <td>0.696912</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Average Score  Std Score  n_neighbors  lower_lim  upper_lim\n",
              "0       0.626178   0.009777            1   0.616401   0.635955\n",
              "1       0.636665   0.002031            2   0.634634   0.638695\n",
              "2       0.661519   0.007190            3   0.654329   0.668709\n",
              "3       0.680846   0.008968            4   0.671878   0.689814\n",
              "4       0.686920   0.009991            5   0.676929   0.696912"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# We generate the upper and lower limits\n",
        "df_scores['lower_lim'] = df_scores['Average Score'] - df_scores['Std Score']\n",
        "df_scores['upper_lim'] = df_scores['Average Score'] + df_scores['Std Score']\n",
        "df_scores.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "9w1dSu1PrCjK",
        "outputId": "2fae1dd1-032d-44f5-bef6-fc7cc0ea7511"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# We graph the outputs\n",
        "plt.plot(df_scores['n_neighbors'], df_scores['lower_lim'], color='r')\n",
        "plt.plot(df_scores['n_neighbors'], df_scores['Average Score'], color='b')\n",
        "plt.plot(df_scores['n_neighbors'], df_scores['upper_lim'], color='r');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "5AsVb00trCjK",
        "outputId": "d1719304-5d0c-4dd1-a965-4667d18d881e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Average Score</th>\n",
              "      <th>Std Score</th>\n",
              "      <th>n_neighbors</th>\n",
              "      <th>lower_lim</th>\n",
              "      <th>upper_lim</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>0.719503</td>\n",
              "      <td>0.014379</td>\n",
              "      <td>79</td>\n",
              "      <td>0.705124</td>\n",
              "      <td>0.733882</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Average Score  Std Score  n_neighbors  lower_lim  upper_lim\n",
              "78       0.719503   0.014379           79   0.705124   0.733882"
            ]
          },
          "execution_count": 45,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# We identify the maximum score\n",
        "df_scores.loc[df_scores['Average Score'] == df_scores['Average Score'].max()]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fCFoImHprCjK"
      },
      "source": [
        "After the cross validation, we identify that the `n_neighbors` value which maximize the average *score* is 21."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2_7pCyfGrCjK"
      },
      "source": [
        "#### **Applying optimal score**\n",
        "\n",
        "Repeating the process but standardizing the feature matrix\n",
        "\n",
        "KNN is a _machine learning_ method that is based on calculating distance. Then, **the correct thing would be to standardize the variables to eliminate their different units of measurement and avoid distortions due to different scales**, something that we have purposely not done in the previous steps. Now, we are going to repeat the procedure but previously standardizing the variables with `StandardScaler` and we will compare the new results with those previously obtained."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "bDPFnRGarCjL"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=127)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "_fi5aBQUrCjL"
      },
      "outputs": [],
      "source": [
        "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
        "X_test_tfidf = tfidf_vectorizer.transform(X_test)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "DL4MHt_FrCjL"
      },
      "outputs": [],
      "source": [
        "# We calculate again the cross validation score, but at this time over the standardize features:\n",
        "\n",
        "scores_para_df_standard = []\n",
        "\n",
        "for i in range(1, 101):\n",
        "    model = KNeighborsClassifier(n_neighbors=i)\n",
        "    cv_scores = cross_val_score(model, X_train_tfidf, y_train, cv=kf)\n",
        "    dict_row_score = {'Average Score':np.mean(cv_scores),\n",
        "                      'Std Score':np.std(cv_scores), 'n_neighbors':i}\n",
        "    scores_para_df_standard.append(dict_row_score)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y8VyaegPrCjL",
        "outputId": "e3c97cca-da5e-4faf-f2b3-0c828d05f97e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   Average Score  Std Score  n_neighbors\n",
            "0       0.744349   0.011074            1\n",
            "1       0.717291   0.023802            2\n",
            "2       0.738263   0.033328            3\n",
            "3       0.734395   0.032110            4\n",
            "4       0.759252   0.010167            5\n",
            "    Average Score  Std Score  n_neighbors\n",
            "95       0.778026   0.022554           96\n",
            "96       0.774712   0.019049           97\n",
            "97       0.774161   0.023282           98\n",
            "98       0.774712   0.020393           99\n",
            "99       0.775263   0.024340          100\n"
          ]
        }
      ],
      "source": [
        "# We create the DataFrame from the list of dictionaries\n",
        "df_scores_standard = pd.DataFrame(scores_para_df_standard)\n",
        "print(f'{df_scores_standard.head()}')\n",
        "print(f'{df_scores_standard.tail()}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "oEAdEV5lrCjL",
        "outputId": "44239671-0ced-4691-c91b-5a98ac93e0ae"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Average Score</th>\n",
              "      <th>Std Score</th>\n",
              "      <th>n_neighbors</th>\n",
              "      <th>lower_lim</th>\n",
              "      <th>upper_lim</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.744349</td>\n",
              "      <td>0.011074</td>\n",
              "      <td>1</td>\n",
              "      <td>0.733275</td>\n",
              "      <td>0.755423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.717291</td>\n",
              "      <td>0.023802</td>\n",
              "      <td>2</td>\n",
              "      <td>0.693489</td>\n",
              "      <td>0.741093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.738263</td>\n",
              "      <td>0.033328</td>\n",
              "      <td>3</td>\n",
              "      <td>0.704935</td>\n",
              "      <td>0.771591</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.734395</td>\n",
              "      <td>0.032110</td>\n",
              "      <td>4</td>\n",
              "      <td>0.702285</td>\n",
              "      <td>0.766504</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.759252</td>\n",
              "      <td>0.010167</td>\n",
              "      <td>5</td>\n",
              "      <td>0.749085</td>\n",
              "      <td>0.769419</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Average Score  Std Score  n_neighbors  lower_lim  upper_lim\n",
              "0       0.744349   0.011074            1   0.733275   0.755423\n",
              "1       0.717291   0.023802            2   0.693489   0.741093\n",
              "2       0.738263   0.033328            3   0.704935   0.771591\n",
              "3       0.734395   0.032110            4   0.702285   0.766504\n",
              "4       0.759252   0.010167            5   0.749085   0.769419"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# We generate the upper and lower limits\n",
        "df_scores_standard['lower_lim'] = df_scores_standard['Average Score'] - df_scores_standard['Std Score']\n",
        "df_scores_standard['upper_lim'] = df_scores_standard['Average Score'] + df_scores_standard['Std Score']\n",
        "df_scores_standard.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "fcYL4WwHrCjL",
        "outputId": "f9f018b4-154e-4c08-8037-c2837cb54e5d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Graph the results\n",
        "plt.plot(df_scores_standard['n_neighbors'], df_scores_standard['lower_lim'], color='r')\n",
        "plt.plot(df_scores_standard['n_neighbors'], df_scores_standard['Average Score'], color='b')\n",
        "plt.plot(df_scores_standard['n_neighbors'], df_scores_standard['upper_lim'], color='r');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "sDJb1VSErCjL",
        "outputId": "4e94e920-9fbb-4b3a-caf3-0f3842e95d09"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Average Score</th>\n",
              "      <th>Std Score</th>\n",
              "      <th>n_neighbors</th>\n",
              "      <th>lower_lim</th>\n",
              "      <th>upper_lim</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0.795699</td>\n",
              "      <td>0.022176</td>\n",
              "      <td>23</td>\n",
              "      <td>0.773522</td>\n",
              "      <td>0.817875</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Average Score  Std Score  n_neighbors  lower_lim  upper_lim\n",
              "22       0.795699   0.022176           23   0.773522   0.817875"
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Identifying the maximum score\n",
        "df_scores_standard.loc[df_scores_standard['Average Score'] == df_scores_standard['Average Score'].max()]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GyNqEYKWrCjL"
      },
      "source": [
        "At this time, the optimal _k_ value is 23 against as 21 using the reduce form, we notice that the average cross-validation _score_ is almost 7 points higher than what we had achieved without standardization of the variables."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "n5xJGBA0rCjL",
        "outputId": "42eb6abe-be2c-4818-f105-77aa5478169e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=23)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=23)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=23)"
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# We choose the optimal model, according to the cross validation test\n",
        "model = KNeighborsClassifier(n_neighbors=23)\n",
        "\n",
        "# Adjust it over the train data\n",
        "model.fit(X_train_tfidf, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8l3EJom1rCjL",
        "outputId": "55ed6c63-595b-4702-ad75-ac0a73af3d74"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The train accuracy is: 0.82\n"
          ]
        }
      ],
      "source": [
        "# Evaluate what accuracy we obtain in train\n",
        "print(f'The train accuracy is: {accuracy_score(y_train, model.predict(X_train_tfidf)).round(2)}')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "id": "KCftUQRbrCjL"
      },
      "outputs": [],
      "source": [
        "'''\n",
        "Forecasting: notice that it is also very important to standardize the test data with the means and deviations learned in train!\n",
        "'''\n",
        "y_pred = model.predict(X_test_tfidf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F_f2M8EFrCjM",
        "outputId": "08644690-3f3c-4f5d-d2cf-a622a902aacf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The test accuracy is: 0.79\n"
          ]
        }
      ],
      "source": [
        "# We evaluate what accuracy we obtain in test\n",
        "print(f'The test accuracy is: {accuracy_score(y_test, y_pred).round(2)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_SDn7lbErCjM"
      },
      "source": [
        "#### Confusion Matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "2bhZ397MrCjM",
        "outputId": "a3823add-bb1d-45a2-95e1-1ecb52eb477c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap=\"Greens\")\n",
        "plt.ylabel('True Label')\n",
        "plt.xlabel('KNN - Projected');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PFDC8BU_rCjM",
        "outputId": "73000eec-572e-471e-a5ff-22918a9b89ec"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.56      0.39      0.46        59\n",
            "           1       0.84      0.94      0.89       287\n",
            "           2       0.71      0.59      0.64       107\n",
            "\n",
            "    accuracy                           0.79       453\n",
            "   macro avg       0.70      0.64      0.66       453\n",
            "weighted avg       0.77      0.79      0.77       453\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BPT0z7AorCjM"
      },
      "source": [
        "Conclusion\n",
        "\n",
        "We have a good and similar performance in the train and test data, as we can see in both accuracies.\n",
        "\n",
        "\n",
        "- Class 0 - Negative: The model correctly predicted the negatives, 23 times. However, it incorrectly predicted negatives as neutral, 20 times, and as positive, 16 times.\n",
        "- Class 1 - Neutral: The model incorrectly predicted only neutrals as negative, 7 times, and 10 as positives. However, it correctly predicted the neutral, 270 times.\n",
        "- Class 2 - Positive: The model incorrectly predicted the positive as negative, 11 times, and as neutral, 33 times. However, it correctly predicted positive, 63 times.\n",
        "\n",
        "The model seems to perform best in predicting class 1 (neutral), as indicated by the large number of true positives for this class.\n",
        "\n",
        "When you compare the KNN's performance on class 0 (negative) and class 2 (positive) against the Logistic Regression's performance is slightly less accurate."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8AMXdfIXrCjM"
      },
      "source": [
        "# Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "gPN4cu2_DIzq"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=127)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "k6olkQTirCjM"
      },
      "outputs": [],
      "source": [
        "rf = RandomForestClassifier(n_estimators=100, random_state=127)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "id": "nmwvCCSyDNJD"
      },
      "outputs": [],
      "source": [
        "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
        "X_test_tfidf = tfidf_vectorizer.transform(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "8EsLEQLtrCjM",
        "outputId": "95899c96-08b2-4b1b-c350-ceaeea132d45"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=127)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=127)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "RandomForestClassifier(random_state=127)"
            ]
          },
          "execution_count": 62,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rf.fit(X_train_tfidf, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DYcbKGzdzIuH",
        "outputId": "a91b58f6-404d-4cd4-cf24-8d81ed88d7a8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The train accuracy is: 0.82\n"
          ]
        }
      ],
      "source": [
        "# Evaluate what accuracy we obtain in train\n",
        "print(f'The train accuracy is: {accuracy_score(y_train, model.predict(X_train_tfidf)).round(2)}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "id": "IAuyH5furCjM"
      },
      "outputs": [],
      "source": [
        "y_pred = rf.predict(X_test_tfidf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AJuuSRSeIkSh",
        "outputId": "3c7c02b2-fca9-4869-a81f-2f1410af670c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The test accuracy is: 0.85\n"
          ]
        }
      ],
      "source": [
        "print(f'The test accuracy is: {accuracy_score(y_test, y_pred).round(2)}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TYd3rl2_rCjM",
        "outputId": "28dd4371-2ea6-4674-b5a5-60651d0583c6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.44      0.58        59\n",
            "           1       0.87      0.99      0.93       287\n",
            "           2       0.79      0.70      0.74       107\n",
            "\n",
            "    accuracy                           0.85       453\n",
            "   macro avg       0.83      0.71      0.75       453\n",
            "weighted avg       0.85      0.85      0.84       453\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "V4FwAPs4rCjN",
        "outputId": "20bb175a-966f-4e6b-99aa-9f2528e55704"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g', cmap='YlOrRd')\n",
        "plt.ylabel('True Labels')\n",
        "plt.xlabel('RF - Projected');"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YJUyYP_CIbzh"
      },
      "source": [
        "Conclusion\n",
        "\n",
        "Considering the differences between train and test accuracies, where the model performs significantly better on the training data than on the test data, which based on the train it appears to be a deterministic model in, it may be overfitting.\n",
        "\n",
        "\n",
        "- Class 0 - Negative: The model correctly predicted the negatives, 26 times. However, it incorrectly predicted negatives as neutral, 16 times, and as positive, 17 times.\n",
        "- Class 1 - Neutral: The model incorrectly predicted neutrals as positives, 3 times. However, it correctly predicted the neutral, 284 times and the negatives.\n",
        "- Class 2 - Positive: The model incorrectly predicted the positive as negative, 5 times, and as neutral, 27 times. However, it correctly predicted positive, 75 times.\n",
        "\n",
        "The model seems to perform best in predicting class 1 (neutral), as indicated by the large number of true positives for this class.\n",
        "\n",
        "When you compare the KNN and RF's performance on class 0 (negative) and class 2 (positive) against the Logistic Regression's performance are slightly less accurate, as seen by the lower numbers in the diagonal cells for these classes and the higher numbers in the off-diagonal cells, which indicate misclassifications.\n",
        "\n",
        "For that reason, we can keep our Logistic Regression models."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tUGoI-MqmSvO"
      },
      "source": [
        "In spite of the three performance, the results suggest that the models are biased towards class 1, which is likely the most prevalent class in the dataset. This is a common issue with imbalanced datasets, where the model tends to favor the majority class."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FC_YhaP-mlQq"
      },
      "source": [
        "## Logistic Regression: Lets check a random sample of 5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "DDZgDosRmhmU",
        "outputId": "716aae69-d3a9-428c-e520-78ad3015a19f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Identify misclassified samples\n",
        "misclassified_indices = np.where(y_test_lr != y_test_pred_lr)[0]\n",
        "\n",
        "# If there are more than 5 misclassified samples, randomly select 5 of them\n",
        "if len(misclassified_indices) > 5:\n",
        "    np.random.seed(127)\n",
        "    selected_indices = np.random.choice(misclassified_indices, 5, replace=False)\n",
        "else:\n",
        "    selected_indices = misclassified_indices\n",
        "\n",
        "# Extract actual and predicted labels for the selected misclassified samples\n",
        "selected_y_test = y_test_lr[selected_indices]\n",
        "selected_y_pred = y_test_pred_lr[selected_indices]\n",
        "\n",
        "# Confusion matrix\n",
        "cm_selected = confusion_matrix(selected_y_test, selected_y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm_selected, annot=True, fmt=\"d\", cmap='PuBu', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\n",
        "plt.title('Confusion Matrix for Misclassified Samples')\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4XjxBsiqozll"
      },
      "source": [
        "## Limitations\n",
        "Imbalanced Dataset: The difference in performance across categories suggests that the dataset might be imbalanced, with category 1 being over-represented. Techniques such as oversampling the minority classes, undersampling the majority class, or using class weights in the model training could help address this issue.\n",
        "\n",
        "Feature Representation: The use of TF-IDF vectors, while effective, ignores the context and order of words. Advanced models that capture sequential information and context, such as LSTM or transformer-based models like BERT, could potentially improve classification performance, especially for the less distinct categories.\n",
        "\n",
        "Hyperparameter Tuning: Exploring different settings for the logistic regression model and the TF-IDF vectorizer (e.g., adjusting regularization strength, using n-grams) might further enhance the model's ability to distinguish between the categories."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hu0hlCZ_XtxF"
      },
      "source": [
        "# Finbert Model\n",
        "Let's compare with a pretrained model FINBERT"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233,
          "referenced_widgets": [
            "916fa8bfef7f46cc94239f9260d7469c",
            "64657f1aa4f849fda3ee7e729c810507",
            "98b805228a824dbd8bb985fc0367c0bb",
            "6f50fcbdbfd8419cb38593f5e0ffb4d1",
            "dfe14b121b0942a684c82fa2d38de0e1",
            "2735d7d5005d45a39dd2e46a73c8b6bf",
            "0c16a15c850546c5a88ed4228ddb2475",
            "2796f09828644c62a95446f93b277b5a",
            "8d75e7d7d281411bb0cf1a199beca82d",
            "f7efc50478cb49f8bdf247ec00cd140d",
            "6811b54490904d318c10cc6412969967",
            "c2aefdeebad04fb3a6ec04e5c7886436",
            "b77afc2c844b41efaed1cddab7ee1249",
            "53351488526c46b5acf7dceb6a0d1767",
            "d8f371f05d554113980be423619e413a",
            "e633c0c0a36a4933a7f1a63268eb488d",
            "8b94b779b7a842bc843f2c74bb561f8d",
            "93b47177ccc144a593a5cd25a82fc253",
            "63e4b2175d7f4ad78216835a668ef266",
            "9ca9ed96ec7c4166ac1865d8747143b3",
            "1570c2100fa94b158fa7a3a620ad45ce",
            "c4ecb1fecd7a4efa9c0fdfd3f42fc807",
            "5de1bb7c75ac44f4ab1e111deab13982",
            "26cff003040c44e79fe06c739f18969f",
            "0598b60e26bc47f2a126a64dbfe4f188",
            "006e407ad25f4713ab2ceeba2df883f8",
            "e5a8d8fc939e42239e3f0471275086c7",
            "37a04aa27dab42b6849bd8dc8af77312",
            "21412f95916d40b09f8d7a5334d0b8f7",
            "9c6592411abd44059a61c578e9487b2e",
            "7a8de4ee09a34d678f14adb17c6c3774",
            "a35ad61bd83f4a988815d392e3b5edc9",
            "020bdb3396dd4e8e8bb922cd2b44ebb2",
            "7928a147f4304ead94ad184f092b9fc2",
            "100d0f18a3b942059b8e5223b18c010c",
            "0ce04e0735da4b9a9416c2cb4c7421f4",
            "1350b65afde74f14a99d8a686db1a0ad",
            "551df3d403f74799b5032bb12c803ad3",
            "04dbfe8a6c2e4cd59047682c6f911335",
            "c5083b0b3f1443c9aba87e45293d5aef",
            "c55a9b7ec0c6474ba4aec638e44ff39a",
            "b579091208074e87aace4fa0c54bbfbf",
            "3b72396c86904d90aa4648eac814af5d",
            "6cf672061dcd4bfbb0824094ec534f50",
            "8e61079146124ffe9a5238bb0e41db60",
            "e2ad4034d67d4a98992d5740859eb6d7",
            "1f51a740bf454971a2f9fa457237cea5",
            "92c7a01d5f75408599cfb800a088c245",
            "bba493b73f294eb3a291b7b1c01eae9c",
            "63194e81e7f3430c9fd3d2ab430e52ab",
            "3ce6e4a6d6484a48afd2d1c46982a382",
            "26e578c3eebe4f48a0e2613a2ee1aa32",
            "47c1080a88e641bb81156e5bbe144333",
            "16da3aac64594ea6a482c32412066452",
            "43a8bc9bdb724bbdbd9e097b0e429171"
          ]
        },
        "id": "tQcjf_HOHAsy",
        "outputId": "6e04c079-b246-4a94-89dc-017658d66bbe"
      },
      "outputs": [],
      "source": [
        "# Specify the FinBERT model name\n",
        "model_name = \"ProsusAI/finbert\"\n",
        "\n",
        "# Load the tokenizer\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "\n",
        "# Load the FinBERT model\n",
        "model = AutoModelForSequenceClassification.from_pretrained(model_name)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "evlMoryQqul3"
      },
      "source": [
        "## Create a pipeline for sentiment analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oj9fslOebPgR",
        "outputId": "2e017d2a-d7d2-4789-d750-c6db2fa886bc"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/Users/joaquintejo/anaconda3/lib/python3.10/site-packages/transformers/pipelines/text_classification.py:89: UserWarning: `return_all_scores` is now deprecated,  if want a similar funcionality use `top_k=None` instead of `return_all_scores=True` or `top_k=1` instead of `return_all_scores=False`.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "finbert_pipeline = pipeline(\"text-classification\", model=model, tokenizer=tokenizer, return_all_scores=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iGQZWpaIHAvl",
        "outputId": "851bf3ee-c8c3-4dd2-c851-c549c0adb191"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "453\n"
          ]
        }
      ],
      "source": [
        "print(len(X_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zm_LMDh0q0Qg"
      },
      "source": [
        "## Since X_test is a list, we use random.sample for sampling"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JZFKEzwmsyAj",
        "outputId": "38f3ea17-ae7b-4ed5-a5c1-63febc2deb1e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "484     Poyry 's contract includes engineering managem...\n",
              "603     The business has sales of about ( Euro ) 35 mi...\n",
              "1270    It also includes the installation of new equip...\n",
              "440     Sales improved to SEK 1,553 mn , compared with...\n",
              "1478    The plant is expected to enter commercial oper...\n",
              "                              ...                        \n",
              "2151    Market share decreased on the route between He...\n",
              "634     The writing and publication of Lemmink+ñinen -...\n",
              "528     `` The issues identified by Stonesoft affect a...\n",
              "2142    Finnish metal products company Componenta Oyj ...\n",
              "1015                           Registration is required .\n",
              "Name: sentence, Length: 453, dtype: object"
            ]
          },
          "execution_count": 72,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2n0XEKm5bU1Z",
        "outputId": "9e345574-b940-4267-aead-5b55cae5b6b6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[{'label': 'positive', 'score': 0.011129351332783699}, {'label': 'negative', 'score': 0.8539496064186096}, {'label': 'neutral', 'score': 0.13492107391357422}]]\n",
            "[[{'label': 'positive', 'score': 0.028385845944285393}, {'label': 'negative', 'score': 0.017552809789776802}, {'label': 'neutral', 'score': 0.9540613293647766}]]\n",
            "[[{'label': 'positive', 'score': 0.9542351961135864}, {'label': 'negative', 'score': 0.017407778650522232}, {'label': 'neutral', 'score': 0.028357060626149178}]]\n",
            "[[{'label': 'positive', 'score': 0.19885964691638947}, {'label': 'negative', 'score': 0.036576442420482635}, {'label': 'neutral', 'score': 0.7645639181137085}]]\n",
            "[[{'label': 'positive', 'score': 0.05767986550927162}, {'label': 'negative', 'score': 0.01435881108045578}, {'label': 'neutral', 'score': 0.9279613494873047}]]\n",
            "[[{'label': 'positive', 'score': 0.954177737236023}, {'label': 'negative', 'score': 0.024287458509206772}, {'label': 'neutral', 'score': 0.021534834057092667}]]\n",
            "[[{'label': 'positive', 'score': 0.0600014366209507}, {'label': 'negative', 'score': 0.01549831498414278}, {'label': 'neutral', 'score': 0.9245002269744873}]]\n",
            "[[{'label': 'positive', 'score': 0.03385891020298004}, {'label': 'negative', 'score': 0.02762683480978012}, {'label': 'neutral', 'score': 0.9385142922401428}]]\n",
            "[[{'label': 'positive', 'score': 0.9585912227630615}, {'label': 'negative', 'score': 0.021879499778151512}, {'label': 'neutral', 'score': 0.019529210403561592}]]\n",
            "[[{'label': 'positive', 'score': 0.021295201033353806}, {'label': 'negative', 'score': 0.032986804842948914}, {'label': 'neutral', 'score': 0.9457180500030518}]]\n",
            "[[{'label': 'positive', 'score': 0.9524030685424805}, {'label': 'negative', 'score': 0.0256551131606102}, {'label': 'neutral', 'score': 0.021941816434264183}]]\n",
            "[[{'label': 'positive', 'score': 0.11978336423635483}, {'label': 'negative', 'score': 0.010028775781393051}, {'label': 'neutral', 'score': 0.8701879382133484}]]\n",
            "[[{'label': 'positive', 'score': 0.9490261077880859}, {'label': 'negative', 'score': 0.029157819226384163}, {'label': 'neutral', 'score': 0.021816080436110497}]]\n",
            "[[{'label': 'positive', 'score': 0.02144191600382328}, {'label': 'negative', 'score': 0.09328609704971313}, {'label': 'neutral', 'score': 0.8852719664573669}]]\n",
            "[[{'label': 'positive', 'score': 0.05773836374282837}, {'label': 'negative', 'score': 0.014805442653596401}, {'label': 'neutral', 'score': 0.927456259727478}]]\n",
            "[[{'label': 'positive', 'score': 0.9491509795188904}, {'label': 'negative', 'score': 0.015181311406195164}, {'label': 'neutral', 'score': 0.03566761314868927}]]\n",
            "[[{'label': 'positive', 'score': 0.11605574935674667}, {'label': 'negative', 'score': 0.010022453032433987}, {'label': 'neutral', 'score': 0.8739217519760132}]]\n",
            "[[{'label': 'positive', 'score': 0.04837172105908394}, {'label': 'negative', 'score': 0.013249718584120274}, {'label': 'neutral', 'score': 0.9383785724639893}]]\n",
            "[[{'label': 'positive', 'score': 0.03987710922956467}, {'label': 'negative', 'score': 0.014759648591279984}, {'label': 'neutral', 'score': 0.9453632235527039}]]\n",
            "[[{'label': 'positive', 'score': 0.0726986974477768}, {'label': 'negative', 'score': 0.018947230651974678}, {'label': 'neutral', 'score': 0.9083540439605713}]]\n",
            "[[{'label': 'positive', 'score': 0.006989837158471346}, {'label': 'negative', 'score': 0.9726865291595459}, {'label': 'neutral', 'score': 0.02032354474067688}]]\n",
            "[[{'label': 'positive', 'score': 0.07803402841091156}, {'label': 'negative', 'score': 0.009996132925152779}, {'label': 'neutral', 'score': 0.9119698405265808}]]\n",
            "[[{'label': 'positive', 'score': 0.08027009665966034}, {'label': 'negative', 'score': 0.015024373307824135}, {'label': 'neutral', 'score': 0.9047055244445801}]]\n",
            "[[{'label': 'positive', 'score': 0.9293785691261292}, {'label': 'negative', 'score': 0.012548722326755524}, {'label': 'neutral', 'score': 0.0580727681517601}]]\n",
            "[[{'label': 'positive', 'score': 0.9543221592903137}, {'label': 'negative', 'score': 0.021942658349871635}, {'label': 'neutral', 'score': 0.023735158145427704}]]\n",
            "[[{'label': 'positive', 'score': 0.017895789816975594}, {'label': 'negative', 'score': 0.03739342838525772}, {'label': 'neutral', 'score': 0.9447108507156372}]]\n",
            "[[{'label': 'positive', 'score': 0.03824424743652344}, {'label': 'negative', 'score': 0.0226319320499897}, {'label': 'neutral', 'score': 0.939123809337616}]]\n",
            "[[{'label': 'positive', 'score': 0.11129245907068253}, {'label': 'negative', 'score': 0.0077098966576159}, {'label': 'neutral', 'score': 0.8809976577758789}]]\n",
            "[[{'label': 'positive', 'score': 0.021863237023353577}, {'label': 'negative', 'score': 0.4313548803329468}, {'label': 'neutral', 'score': 0.5467818975448608}]]\n",
            "[[{'label': 'positive', 'score': 0.04713546857237816}, {'label': 'negative', 'score': 0.01316847000271082}, {'label': 'neutral', 'score': 0.9396961331367493}]]\n",
            "[[{'label': 'positive', 'score': 0.008455063216388226}, {'label': 'negative', 'score': 0.9731277227401733}, {'label': 'neutral', 'score': 0.018417155370116234}]]\n",
            "[[{'label': 'positive', 'score': 0.05126474052667618}, {'label': 'negative', 'score': 0.011731726117432117}, {'label': 'neutral', 'score': 0.937003493309021}]]\n",
            "[[{'label': 'positive', 'score': 0.786149263381958}, {'label': 'negative', 'score': 0.050160668790340424}, {'label': 'neutral', 'score': 0.1636900156736374}]]\n",
            "[[{'label': 'positive', 'score': 0.9393893480300903}, {'label': 'negative', 'score': 0.03543837368488312}, {'label': 'neutral', 'score': 0.02517235465347767}]]\n",
            "[[{'label': 'positive', 'score': 0.9497298002243042}, {'label': 'negative', 'score': 0.02752036042511463}, {'label': 'neutral', 'score': 0.022749915719032288}]]\n",
            "[[{'label': 'positive', 'score': 0.9442554712295532}, {'label': 'negative', 'score': 0.012327485717833042}, {'label': 'neutral', 'score': 0.04341709241271019}]]\n",
            "[[{'label': 'positive', 'score': 0.9518585801124573}, {'label': 'negative', 'score': 0.028630929067730904}, {'label': 'neutral', 'score': 0.01951039582490921}]]\n",
            "[[{'label': 'positive', 'score': 0.6710264086723328}, {'label': 'negative', 'score': 0.014858050271868706}, {'label': 'neutral', 'score': 0.3141154944896698}]]\n",
            "[[{'label': 'positive', 'score': 0.8789880871772766}, {'label': 'negative', 'score': 0.007923191413283348}, {'label': 'neutral', 'score': 0.11308872699737549}]]\n",
            "[[{'label': 'positive', 'score': 0.03348975256085396}, {'label': 'negative', 'score': 0.018294015899300575}, {'label': 'neutral', 'score': 0.9482161998748779}]]\n",
            "[[{'label': 'positive', 'score': 0.06734007596969604}, {'label': 'negative', 'score': 0.013309967704117298}, {'label': 'neutral', 'score': 0.9193499684333801}]]\n",
            "[[{'label': 'positive', 'score': 0.05453690141439438}, {'label': 'negative', 'score': 0.010401636362075806}, {'label': 'neutral', 'score': 0.9350613951683044}]]\n",
            "[[{'label': 'positive', 'score': 0.9541093111038208}, {'label': 'negative', 'score': 0.019595686346292496}, {'label': 'neutral', 'score': 0.026294974610209465}]]\n",
            "[[{'label': 'positive', 'score': 0.037390317767858505}, {'label': 'negative', 'score': 0.01810331456363201}, {'label': 'neutral', 'score': 0.9445064067840576}]]\n",
            "[[{'label': 'positive', 'score': 0.27566173672676086}, {'label': 'negative', 'score': 0.00723485229536891}, {'label': 'neutral', 'score': 0.7171034216880798}]]\n",
            "[[{'label': 'positive', 'score': 0.9575730562210083}, {'label': 'negative', 'score': 0.022930625826120377}, {'label': 'neutral', 'score': 0.01949632540345192}]]\n",
            "[[{'label': 'positive', 'score': 0.9526933431625366}, {'label': 'negative', 'score': 0.01385565847158432}, {'label': 'neutral', 'score': 0.03345097228884697}]]\n",
            "[[{'label': 'positive', 'score': 0.02260018326342106}, {'label': 'negative', 'score': 0.8496603965759277}, {'label': 'neutral', 'score': 0.12773944437503815}]]\n",
            "[[{'label': 'positive', 'score': 0.7615022659301758}, {'label': 'negative', 'score': 0.21698684990406036}, {'label': 'neutral', 'score': 0.021510912105441093}]]\n",
            "[[{'label': 'positive', 'score': 0.01122268009930849}, {'label': 'negative', 'score': 0.9569447040557861}, {'label': 'neutral', 'score': 0.03183262050151825}]]\n",
            "[[{'label': 'positive', 'score': 0.032274674624204636}, {'label': 'negative', 'score': 0.015977762639522552}, {'label': 'neutral', 'score': 0.9517475962638855}]]\n",
            "[[{'label': 'positive', 'score': 0.9521844387054443}, {'label': 'negative', 'score': 0.02600853145122528}, {'label': 'neutral', 'score': 0.021807044744491577}]]\n",
            "[[{'label': 'positive', 'score': 0.16950370371341705}, {'label': 'negative', 'score': 0.007945410907268524}, {'label': 'neutral', 'score': 0.8225508332252502}]]\n",
            "[[{'label': 'positive', 'score': 0.009209991432726383}, {'label': 'negative', 'score': 0.9762643575668335}, {'label': 'neutral', 'score': 0.014525653794407845}]]\n",
            "[[{'label': 'positive', 'score': 0.00759827671572566}, {'label': 'negative', 'score': 0.9751431941986084}, {'label': 'neutral', 'score': 0.017258528620004654}]]\n",
            "[[{'label': 'positive', 'score': 0.15711557865142822}, {'label': 'negative', 'score': 0.01475928071886301}, {'label': 'neutral', 'score': 0.8281251788139343}]]\n",
            "[[{'label': 'positive', 'score': 0.949716329574585}, {'label': 'negative', 'score': 0.02667924202978611}, {'label': 'neutral', 'score': 0.023604409769177437}]]\n",
            "[[{'label': 'positive', 'score': 0.03239048272371292}, {'label': 'negative', 'score': 0.13558611273765564}, {'label': 'neutral', 'score': 0.8320233821868896}]]\n",
            "[[{'label': 'positive', 'score': 0.033088237047195435}, {'label': 'negative', 'score': 0.017948389053344727}, {'label': 'neutral', 'score': 0.9489633440971375}]]\n",
            "[[{'label': 'positive', 'score': 0.9582543969154358}, {'label': 'negative', 'score': 0.02257978357374668}, {'label': 'neutral', 'score': 0.019165726378560066}]]\n",
            "[[{'label': 'positive', 'score': 0.9578080177307129}, {'label': 'negative', 'score': 0.01626579463481903}, {'label': 'neutral', 'score': 0.025926249101758003}]]\n",
            "[[{'label': 'positive', 'score': 0.032388437539339066}, {'label': 'negative', 'score': 0.020845256745815277}, {'label': 'neutral', 'score': 0.9467663168907166}]]\n",
            "[[{'label': 'positive', 'score': 0.12723542749881744}, {'label': 'negative', 'score': 0.8576661348342896}, {'label': 'neutral', 'score': 0.01509848702698946}]]\n",
            "[[{'label': 'positive', 'score': 0.006984398700296879}, {'label': 'negative', 'score': 0.9734932780265808}, {'label': 'neutral', 'score': 0.019522342830896378}]]\n",
            "[[{'label': 'positive', 'score': 0.07125820219516754}, {'label': 'negative', 'score': 0.010269967839121819}, {'label': 'neutral', 'score': 0.9184718132019043}]]\n",
            "[[{'label': 'positive', 'score': 0.00839406531304121}, {'label': 'negative', 'score': 0.9757063388824463}, {'label': 'neutral', 'score': 0.01589960977435112}]]\n",
            "[[{'label': 'positive', 'score': 0.9520371556282043}, {'label': 'negative', 'score': 0.027341019362211227}, {'label': 'neutral', 'score': 0.020621823146939278}]]\n",
            "[[{'label': 'positive', 'score': 0.03522484377026558}, {'label': 'negative', 'score': 0.02245805226266384}, {'label': 'neutral', 'score': 0.9423171281814575}]]\n",
            "[[{'label': 'positive', 'score': 0.03789827972650528}, {'label': 'negative', 'score': 0.014274495653808117}, {'label': 'neutral', 'score': 0.947827160358429}]]\n",
            "[[{'label': 'positive', 'score': 0.08788754045963287}, {'label': 'negative', 'score': 0.009631245397031307}, {'label': 'neutral', 'score': 0.902481198310852}]]\n",
            "[[{'label': 'positive', 'score': 0.9232189059257507}, {'label': 'negative', 'score': 0.011576799675822258}, {'label': 'neutral', 'score': 0.06520429253578186}]]\n",
            "[[{'label': 'positive', 'score': 0.12414702773094177}, {'label': 'negative', 'score': 0.008631316013634205}, {'label': 'neutral', 'score': 0.8672216534614563}]]\n",
            "[[{'label': 'positive', 'score': 0.02791319414973259}, {'label': 'negative', 'score': 0.021651020273566246}, {'label': 'neutral', 'score': 0.9504357576370239}]]\n",
            "[[{'label': 'positive', 'score': 0.03102632239460945}, {'label': 'negative', 'score': 0.015713203698396683}, {'label': 'neutral', 'score': 0.9532604217529297}]]\n",
            "[[{'label': 'positive', 'score': 0.008913752622902393}, {'label': 'negative', 'score': 0.9767041206359863}, {'label': 'neutral', 'score': 0.014382163062691689}]]\n",
            "[[{'label': 'positive', 'score': 0.14124861359596252}, {'label': 'negative', 'score': 0.008379262872040272}, {'label': 'neutral', 'score': 0.8503721356391907}]]\n",
            "[[{'label': 'positive', 'score': 0.0991210862994194}, {'label': 'negative', 'score': 0.014566351659595966}, {'label': 'neutral', 'score': 0.8863125443458557}]]\n",
            "[[{'label': 'positive', 'score': 0.0820232406258583}, {'label': 'negative', 'score': 0.008693141862750053}, {'label': 'neutral', 'score': 0.9092836380004883}]]\n",
            "[[{'label': 'positive', 'score': 0.9576294422149658}, {'label': 'negative', 'score': 0.013505988754332066}, {'label': 'neutral', 'score': 0.028864623978734016}]]\n",
            "[[{'label': 'positive', 'score': 0.07763242721557617}, {'label': 'negative', 'score': 0.012241353280842304}, {'label': 'neutral', 'score': 0.9101262092590332}]]\n",
            "[[{'label': 'positive', 'score': 0.043325819075107574}, {'label': 'negative', 'score': 0.02354920469224453}, {'label': 'neutral', 'score': 0.9331250190734863}]]\n",
            "[[{'label': 'positive', 'score': 0.02877267822623253}, {'label': 'negative', 'score': 0.017098568379878998}, {'label': 'neutral', 'score': 0.9541286826133728}]]\n",
            "[[{'label': 'positive', 'score': 0.0952553004026413}, {'label': 'negative', 'score': 0.014730594120919704}, {'label': 'neutral', 'score': 0.890014111995697}]]\n",
            "[[{'label': 'positive', 'score': 0.10056837648153305}, {'label': 'negative', 'score': 0.009181991219520569}, {'label': 'neutral', 'score': 0.8902496695518494}]]\n",
            "[[{'label': 'positive', 'score': 0.062189336866140366}, {'label': 'negative', 'score': 0.017586136236786842}, {'label': 'neutral', 'score': 0.9202245473861694}]]\n",
            "[[{'label': 'positive', 'score': 0.012817339040338993}, {'label': 'negative', 'score': 0.9691150188446045}, {'label': 'neutral', 'score': 0.018067732453346252}]]\n",
            "[[{'label': 'positive', 'score': 0.07341518998146057}, {'label': 'negative', 'score': 0.011068861931562424}, {'label': 'neutral', 'score': 0.9155159592628479}]]\n",
            "[[{'label': 'positive', 'score': 0.9123318791389465}, {'label': 'negative', 'score': 0.013575599528849125}, {'label': 'neutral', 'score': 0.07409253716468811}]]\n",
            "[[{'label': 'positive', 'score': 0.024634020403027534}, {'label': 'negative', 'score': 0.19701042771339417}, {'label': 'neutral', 'score': 0.7783554792404175}]]\n",
            "[[{'label': 'positive', 'score': 0.08726967871189117}, {'label': 'negative', 'score': 0.0917709469795227}, {'label': 'neutral', 'score': 0.8209593892097473}]]\n",
            "[[{'label': 'positive', 'score': 0.039187490940093994}, {'label': 'negative', 'score': 0.01663978211581707}, {'label': 'neutral', 'score': 0.9441726803779602}]]\n",
            "[[{'label': 'positive', 'score': 0.10329459607601166}, {'label': 'negative', 'score': 0.047977201640605927}, {'label': 'neutral', 'score': 0.8487281799316406}]]\n",
            "[[{'label': 'positive', 'score': 0.027570657432079315}, {'label': 'negative', 'score': 0.028916824609041214}, {'label': 'neutral', 'score': 0.9435125589370728}]]\n",
            "[[{'label': 'positive', 'score': 0.05176708474755287}, {'label': 'negative', 'score': 0.012282213196158409}, {'label': 'neutral', 'score': 0.9359506964683533}]]\n",
            "[[{'label': 'positive', 'score': 0.9291832447052002}, {'label': 'negative', 'score': 0.01015559583902359}, {'label': 'neutral', 'score': 0.06066109612584114}]]\n",
            "[[{'label': 'positive', 'score': 0.9552876353263855}, {'label': 'negative', 'score': 0.029858538880944252}, {'label': 'neutral', 'score': 0.014853820204734802}]]\n",
            "[[{'label': 'positive', 'score': 0.03161787614226341}, {'label': 'negative', 'score': 0.031668294221162796}, {'label': 'neutral', 'score': 0.9367138743400574}]]\n",
            "[[{'label': 'positive', 'score': 0.022874655202031136}, {'label': 'negative', 'score': 0.029980933293700218}, {'label': 'neutral', 'score': 0.9471443891525269}]]\n",
            "[[{'label': 'positive', 'score': 0.1477791666984558}, {'label': 'negative', 'score': 0.007247230038046837}, {'label': 'neutral', 'score': 0.8449735641479492}]]\n",
            "[[{'label': 'positive', 'score': 0.06611320376396179}, {'label': 'negative', 'score': 0.011784513480961323}, {'label': 'neutral', 'score': 0.9221022725105286}]]\n",
            "[[{'label': 'positive', 'score': 0.9447519183158875}, {'label': 'negative', 'score': 0.014412211254239082}, {'label': 'neutral', 'score': 0.04083593934774399}]]\n",
            "[[{'label': 'positive', 'score': 0.05218207836151123}, {'label': 'negative', 'score': 0.01326292660087347}, {'label': 'neutral', 'score': 0.9345550537109375}]]\n",
            "[[{'label': 'positive', 'score': 0.7524206042289734}, {'label': 'negative', 'score': 0.013881946913897991}, {'label': 'neutral', 'score': 0.23369745910167694}]]\n",
            "[[{'label': 'positive', 'score': 0.9331027865409851}, {'label': 'negative', 'score': 0.010518565773963928}, {'label': 'neutral', 'score': 0.05637868866324425}]]\n",
            "[[{'label': 'positive', 'score': 0.008308492600917816}, {'label': 'negative', 'score': 0.9754182696342468}, {'label': 'neutral', 'score': 0.01627320423722267}]]\n",
            "[[{'label': 'positive', 'score': 0.026369085535407066}, {'label': 'negative', 'score': 0.0318932868540287}, {'label': 'neutral', 'score': 0.9417376518249512}]]\n",
            "[[{'label': 'positive', 'score': 0.9460886120796204}, {'label': 'negative', 'score': 0.0313832126557827}, {'label': 'neutral', 'score': 0.02252824231982231}]]\n",
            "[[{'label': 'positive', 'score': 0.09924687445163727}, {'label': 'negative', 'score': 0.009645385667681694}, {'label': 'neutral', 'score': 0.8911077976226807}]]\n",
            "[[{'label': 'positive', 'score': 0.130250945687294}, {'label': 'negative', 'score': 0.010874198749661446}, {'label': 'neutral', 'score': 0.8588747978210449}]]\n",
            "[[{'label': 'positive', 'score': 0.03436003997921944}, {'label': 'negative', 'score': 0.01629599556326866}, {'label': 'neutral', 'score': 0.9493439197540283}]]\n",
            "[[{'label': 'positive', 'score': 0.05786123871803284}, {'label': 'negative', 'score': 0.014897294342517853}, {'label': 'neutral', 'score': 0.9272414445877075}]]\n",
            "[[{'label': 'positive', 'score': 0.18303097784519196}, {'label': 'negative', 'score': 0.7893975973129272}, {'label': 'neutral', 'score': 0.027571409940719604}]]\n",
            "[[{'label': 'positive', 'score': 0.11842399835586548}, {'label': 'negative', 'score': 0.008362779393792152}, {'label': 'neutral', 'score': 0.8732131719589233}]]\n",
            "[[{'label': 'positive', 'score': 0.07397738099098206}, {'label': 'negative', 'score': 0.008856297470629215}, {'label': 'neutral', 'score': 0.9171663522720337}]]\n",
            "[[{'label': 'positive', 'score': 0.03261234611272812}, {'label': 'negative', 'score': 0.03202497959136963}, {'label': 'neutral', 'score': 0.9353626370429993}]]\n",
            "[[{'label': 'positive', 'score': 0.042182765901088715}, {'label': 'negative', 'score': 0.01774761639535427}, {'label': 'neutral', 'score': 0.9400696158409119}]]\n",
            "[[{'label': 'positive', 'score': 0.025660116225481033}, {'label': 'negative', 'score': 0.023165922611951828}, {'label': 'neutral', 'score': 0.9511740207672119}]]\n",
            "[[{'label': 'positive', 'score': 0.800633430480957}, {'label': 'negative', 'score': 0.009007731452584267}, {'label': 'neutral', 'score': 0.19035889208316803}]]\n",
            "[[{'label': 'positive', 'score': 0.04799283668398857}, {'label': 'negative', 'score': 0.020855464041233063}, {'label': 'neutral', 'score': 0.9311516880989075}]]\n",
            "[[{'label': 'positive', 'score': 0.019760631024837494}, {'label': 'negative', 'score': 0.02822863683104515}, {'label': 'neutral', 'score': 0.9520106911659241}]]\n",
            "[[{'label': 'positive', 'score': 0.9548313617706299}, {'label': 'negative', 'score': 0.023889465257525444}, {'label': 'neutral', 'score': 0.021279236301779747}]]\n",
            "[[{'label': 'positive', 'score': 0.021671155467629433}, {'label': 'negative', 'score': 0.037238094955682755}, {'label': 'neutral', 'score': 0.9410907626152039}]]\n",
            "[[{'label': 'positive', 'score': 0.34659144282341003}, {'label': 'negative', 'score': 0.63545823097229}, {'label': 'neutral', 'score': 0.017950352281332016}]]\n",
            "[[{'label': 'positive', 'score': 0.9572573304176331}, {'label': 'negative', 'score': 0.02111951634287834}, {'label': 'neutral', 'score': 0.021623114123940468}]]\n",
            "[[{'label': 'positive', 'score': 0.031226953491568565}, {'label': 'negative', 'score': 0.04641171544790268}, {'label': 'neutral', 'score': 0.9223613142967224}]]\n",
            "[[{'label': 'positive', 'score': 0.0689040869474411}, {'label': 'negative', 'score': 0.2349197268486023}, {'label': 'neutral', 'score': 0.6961761713027954}]]\n",
            "[[{'label': 'positive', 'score': 0.035993922501802444}, {'label': 'negative', 'score': 0.017441274598240852}, {'label': 'neutral', 'score': 0.9465648531913757}]]\n",
            "[[{'label': 'positive', 'score': 0.22808736562728882}, {'label': 'negative', 'score': 0.007238244637846947}, {'label': 'neutral', 'score': 0.7646743655204773}]]\n",
            "[[{'label': 'positive', 'score': 0.9479690194129944}, {'label': 'negative', 'score': 0.026863468810915947}, {'label': 'neutral', 'score': 0.025167521089315414}]]\n",
            "[[{'label': 'positive', 'score': 0.030747627839446068}, {'label': 'negative', 'score': 0.017473654821515083}, {'label': 'neutral', 'score': 0.9517787098884583}]]\n",
            "[[{'label': 'positive', 'score': 0.031663928180933}, {'label': 'negative', 'score': 0.015711545944213867}, {'label': 'neutral', 'score': 0.9526245594024658}]]\n",
            "[[{'label': 'positive', 'score': 0.008036084473133087}, {'label': 'negative', 'score': 0.9719398617744446}, {'label': 'neutral', 'score': 0.020023971796035767}]]\n",
            "[[{'label': 'positive', 'score': 0.053870365023612976}, {'label': 'negative', 'score': 0.012580865994095802}, {'label': 'neutral', 'score': 0.9335488080978394}]]\n",
            "[[{'label': 'positive', 'score': 0.11417379975318909}, {'label': 'negative', 'score': 0.008221453987061977}, {'label': 'neutral', 'score': 0.8776047825813293}]]\n",
            "[[{'label': 'positive', 'score': 0.035423390567302704}, {'label': 'negative', 'score': 0.022174984216690063}, {'label': 'neutral', 'score': 0.9424015879631042}]]\n",
            "[[{'label': 'positive', 'score': 0.9478195905685425}, {'label': 'negative', 'score': 0.02647358551621437}, {'label': 'neutral', 'score': 0.025706814602017403}]]\n",
            "[[{'label': 'positive', 'score': 0.017882462590932846}, {'label': 'negative', 'score': 0.0305279903113842}, {'label': 'neutral', 'score': 0.9515895247459412}]]\n",
            "[[{'label': 'positive', 'score': 0.026513883844017982}, {'label': 'negative', 'score': 0.03298960626125336}, {'label': 'neutral', 'score': 0.9404965043067932}]]\n",
            "[[{'label': 'positive', 'score': 0.07864966988563538}, {'label': 'negative', 'score': 0.04523111507296562}, {'label': 'neutral', 'score': 0.8761192560195923}]]\n",
            "[[{'label': 'positive', 'score': 0.07159657031297684}, {'label': 'negative', 'score': 0.009849839843809605}, {'label': 'neutral', 'score': 0.9185535907745361}]]\n",
            "[[{'label': 'positive', 'score': 0.06661389023065567}, {'label': 'negative', 'score': 0.012490294873714447}, {'label': 'neutral', 'score': 0.9208958745002747}]]\n",
            "[[{'label': 'positive', 'score': 0.9574838876724243}, {'label': 'negative', 'score': 0.017201587557792664}, {'label': 'neutral', 'score': 0.0253145731985569}]]\n",
            "[[{'label': 'positive', 'score': 0.9528653025627136}, {'label': 'negative', 'score': 0.02176894061267376}, {'label': 'neutral', 'score': 0.025365730747580528}]]\n",
            "[[{'label': 'positive', 'score': 0.08706314116716385}, {'label': 'negative', 'score': 0.02238050289452076}, {'label': 'neutral', 'score': 0.8905563354492188}]]\n",
            "[[{'label': 'positive', 'score': 0.03209652006626129}, {'label': 'negative', 'score': 0.021036172285676003}, {'label': 'neutral', 'score': 0.9468672871589661}]]\n",
            "[[{'label': 'positive', 'score': 0.07218759506940842}, {'label': 'negative', 'score': 0.010551925748586655}, {'label': 'neutral', 'score': 0.9172605276107788}]]\n",
            "[[{'label': 'positive', 'score': 0.04079854488372803}, {'label': 'negative', 'score': 0.018786679953336716}, {'label': 'neutral', 'score': 0.9404147863388062}]]\n",
            "[[{'label': 'positive', 'score': 0.9581008553504944}, {'label': 'negative', 'score': 0.01991976797580719}, {'label': 'neutral', 'score': 0.02197929285466671}]]\n",
            "[[{'label': 'positive', 'score': 0.05169953033328056}, {'label': 'negative', 'score': 0.013846090994775295}, {'label': 'neutral', 'score': 0.9344543814659119}]]\n",
            "[[{'label': 'positive', 'score': 0.312492698431015}, {'label': 'negative', 'score': 0.00672244792804122}, {'label': 'neutral', 'score': 0.6807848811149597}]]\n",
            "[[{'label': 'positive', 'score': 0.023576656356453896}, {'label': 'negative', 'score': 0.027675777673721313}, {'label': 'neutral', 'score': 0.9487475752830505}]]\n",
            "[[{'label': 'positive', 'score': 0.008780861273407936}, {'label': 'negative', 'score': 0.9770232439041138}, {'label': 'neutral', 'score': 0.014196020551025867}]]\n",
            "[[{'label': 'positive', 'score': 0.029724406078457832}, {'label': 'negative', 'score': 0.023216215893626213}, {'label': 'neutral', 'score': 0.9470593929290771}]]\n",
            "[[{'label': 'positive', 'score': 0.955447256565094}, {'label': 'negative', 'score': 0.017040712758898735}, {'label': 'neutral', 'score': 0.02751198410987854}]]\n",
            "[[{'label': 'positive', 'score': 0.05375206097960472}, {'label': 'negative', 'score': 0.013463212177157402}, {'label': 'neutral', 'score': 0.9327847361564636}]]\n",
            "[[{'label': 'positive', 'score': 0.05341891944408417}, {'label': 'negative', 'score': 0.021122459322214127}, {'label': 'neutral', 'score': 0.9254586696624756}]]\n",
            "[[{'label': 'positive', 'score': 0.059763383120298386}, {'label': 'negative', 'score': 0.01218660268932581}, {'label': 'neutral', 'score': 0.9280500411987305}]]\n",
            "[[{'label': 'positive', 'score': 0.024542618542909622}, {'label': 'negative', 'score': 0.02253352664411068}, {'label': 'neutral', 'score': 0.9529238939285278}]]\n",
            "[[{'label': 'positive', 'score': 0.03221316635608673}, {'label': 'negative', 'score': 0.029113683849573135}, {'label': 'neutral', 'score': 0.9386730790138245}]]\n",
            "[[{'label': 'positive', 'score': 0.021377921104431152}, {'label': 'negative', 'score': 0.036937929689884186}, {'label': 'neutral', 'score': 0.9416841268539429}]]\n",
            "[[{'label': 'positive', 'score': 0.9010884165763855}, {'label': 'negative', 'score': 0.007786914240568876}, {'label': 'neutral', 'score': 0.09112463891506195}]]\n",
            "[[{'label': 'positive', 'score': 0.023736480623483658}, {'label': 'negative', 'score': 0.05045316740870476}, {'label': 'neutral', 'score': 0.9258103370666504}]]\n",
            "[[{'label': 'positive', 'score': 0.9442790746688843}, {'label': 'negative', 'score': 0.031108060851693153}, {'label': 'neutral', 'score': 0.02461286075413227}]]\n",
            "[[{'label': 'positive', 'score': 0.05099046230316162}, {'label': 'negative', 'score': 0.017896361649036407}, {'label': 'neutral', 'score': 0.9311131834983826}]]\n",
            "[[{'label': 'positive', 'score': 0.9540409445762634}, {'label': 'negative', 'score': 0.023368587717413902}, {'label': 'neutral', 'score': 0.022590477019548416}]]\n",
            "[[{'label': 'positive', 'score': 0.06482715904712677}, {'label': 'negative', 'score': 0.013422808609902859}, {'label': 'neutral', 'score': 0.921750009059906}]]\n",
            "[[{'label': 'positive', 'score': 0.9514315128326416}, {'label': 'negative', 'score': 0.02705642208456993}, {'label': 'neutral', 'score': 0.021512001752853394}]]\n",
            "[[{'label': 'positive', 'score': 0.02785693109035492}, {'label': 'negative', 'score': 0.01970396377146244}, {'label': 'neutral', 'score': 0.9524390697479248}]]\n",
            "[[{'label': 'positive', 'score': 0.10644911974668503}, {'label': 'negative', 'score': 0.008662940934300423}, {'label': 'neutral', 'score': 0.8848878741264343}]]\n",
            "[[{'label': 'positive', 'score': 0.0211531650274992}, {'label': 'negative', 'score': 0.023637233301997185}, {'label': 'neutral', 'score': 0.9552096128463745}]]\n",
            "[[{'label': 'positive', 'score': 0.9578178524971008}, {'label': 'negative', 'score': 0.01610540598630905}, {'label': 'neutral', 'score': 0.02607666701078415}]]\n",
            "[[{'label': 'positive', 'score': 0.1501949578523636}, {'label': 'negative', 'score': 0.020880920812487602}, {'label': 'neutral', 'score': 0.8289241790771484}]]\n",
            "[[{'label': 'positive', 'score': 0.05879579111933708}, {'label': 'negative', 'score': 0.01270364224910736}, {'label': 'neutral', 'score': 0.9285005927085876}]]\n",
            "[[{'label': 'positive', 'score': 0.006722587626427412}, {'label': 'negative', 'score': 0.9711790680885315}, {'label': 'neutral', 'score': 0.022098295390605927}]]\n",
            "[[{'label': 'positive', 'score': 0.009187577292323112}, {'label': 'negative', 'score': 0.9768152236938477}, {'label': 'neutral', 'score': 0.013997210189700127}]]\n",
            "[[{'label': 'positive', 'score': 0.02857699990272522}, {'label': 'negative', 'score': 0.016095684841275215}, {'label': 'neutral', 'score': 0.9553273320198059}]]\n",
            "[[{'label': 'positive', 'score': 0.1055821031332016}, {'label': 'negative', 'score': 0.01649785414338112}, {'label': 'neutral', 'score': 0.8779199719429016}]]\n",
            "[[{'label': 'positive', 'score': 0.15110225975513458}, {'label': 'negative', 'score': 0.008759195916354656}, {'label': 'neutral', 'score': 0.8401385545730591}]]\n",
            "[[{'label': 'positive', 'score': 0.034713488072156906}, {'label': 'negative', 'score': 0.025684401392936707}, {'label': 'neutral', 'score': 0.9396021366119385}]]\n",
            "[[{'label': 'positive', 'score': 0.9525002837181091}, {'label': 'negative', 'score': 0.025698242709040642}, {'label': 'neutral', 'score': 0.021801501512527466}]]\n",
            "[[{'label': 'positive', 'score': 0.016903534531593323}, {'label': 'negative', 'score': 0.9657704830169678}, {'label': 'neutral', 'score': 0.017326004803180695}]]\n",
            "[[{'label': 'positive', 'score': 0.010908786207437515}, {'label': 'negative', 'score': 0.9712488055229187}, {'label': 'neutral', 'score': 0.017842430621385574}]]\n",
            "[[{'label': 'positive', 'score': 0.050014276057481766}, {'label': 'negative', 'score': 0.014552135020494461}, {'label': 'neutral', 'score': 0.935433566570282}]]\n",
            "[[{'label': 'positive', 'score': 0.08284881711006165}, {'label': 'negative', 'score': 0.010204584337770939}, {'label': 'neutral', 'score': 0.9069466590881348}]]\n",
            "[[{'label': 'positive', 'score': 0.952256977558136}, {'label': 'negative', 'score': 0.025214286521077156}, {'label': 'neutral', 'score': 0.022528761997818947}]]\n",
            "[[{'label': 'positive', 'score': 0.019666746258735657}, {'label': 'negative', 'score': 0.04102202504873276}, {'label': 'neutral', 'score': 0.9393112063407898}]]\n",
            "[[{'label': 'positive', 'score': 0.00898433942347765}, {'label': 'negative', 'score': 0.9734609723091125}, {'label': 'neutral', 'score': 0.01755462773144245}]]\n",
            "[[{'label': 'positive', 'score': 0.1317291557788849}, {'label': 'negative', 'score': 0.007788197137415409}, {'label': 'neutral', 'score': 0.8604826927185059}]]\n",
            "[[{'label': 'positive', 'score': 0.021069269627332687}, {'label': 'negative', 'score': 0.02943006157875061}, {'label': 'neutral', 'score': 0.9495006799697876}]]\n",
            "[[{'label': 'positive', 'score': 0.028731819242239}, {'label': 'negative', 'score': 0.020789803937077522}, {'label': 'neutral', 'score': 0.9504784345626831}]]\n",
            "[[{'label': 'positive', 'score': 0.023654190823435783}, {'label': 'negative', 'score': 0.0234749186784029}, {'label': 'neutral', 'score': 0.9528708457946777}]]\n",
            "[[{'label': 'positive', 'score': 0.036665696650743484}, {'label': 'negative', 'score': 0.018260756507515907}, {'label': 'neutral', 'score': 0.9450735449790955}]]\n",
            "[[{'label': 'positive', 'score': 0.9557426571846008}, {'label': 'negative', 'score': 0.022039489820599556}, {'label': 'neutral', 'score': 0.022217845544219017}]]\n",
            "[[{'label': 'positive', 'score': 0.9318978190422058}, {'label': 'negative', 'score': 0.007927914150059223}, {'label': 'neutral', 'score': 0.06017421558499336}]]\n",
            "[[{'label': 'positive', 'score': 0.013916980475187302}, {'label': 'negative', 'score': 0.9672859907150269}, {'label': 'neutral', 'score': 0.018797054886817932}]]\n",
            "[[{'label': 'positive', 'score': 0.07684807479381561}, {'label': 'negative', 'score': 0.008820103481411934}, {'label': 'neutral', 'score': 0.91433185338974}]]\n",
            "[[{'label': 'positive', 'score': 0.02387259714305401}, {'label': 'negative', 'score': 0.030367599800229073}, {'label': 'neutral', 'score': 0.9457598328590393}]]\n",
            "[[{'label': 'positive', 'score': 0.06724203377962112}, {'label': 'negative', 'score': 0.012770752422511578}, {'label': 'neutral', 'score': 0.9199872016906738}]]\n",
            "[[{'label': 'positive', 'score': 0.9590121507644653}, {'label': 'negative', 'score': 0.017168842256069183}, {'label': 'neutral', 'score': 0.023819027468562126}]]\n",
            "[[{'label': 'positive', 'score': 0.03721168637275696}, {'label': 'negative', 'score': 0.03369034081697464}, {'label': 'neutral', 'score': 0.9290979504585266}]]\n",
            "[[{'label': 'positive', 'score': 0.9020431637763977}, {'label': 'negative', 'score': 0.08012794703245163}, {'label': 'neutral', 'score': 0.017828892916440964}]]\n",
            "[[{'label': 'positive', 'score': 0.08173047751188278}, {'label': 'negative', 'score': 0.01028583012521267}, {'label': 'neutral', 'score': 0.9079837203025818}]]\n",
            "[[{'label': 'positive', 'score': 0.03175884485244751}, {'label': 'negative', 'score': 0.024466805160045624}, {'label': 'neutral', 'score': 0.9437743425369263}]]\n",
            "[[{'label': 'positive', 'score': 0.9502317905426025}, {'label': 'negative', 'score': 0.02391383796930313}, {'label': 'neutral', 'score': 0.025854429230093956}]]\n",
            "[[{'label': 'positive', 'score': 0.09798368811607361}, {'label': 'negative', 'score': 0.8841903209686279}, {'label': 'neutral', 'score': 0.01782597228884697}]]\n",
            "[[{'label': 'positive', 'score': 0.9554136991500854}, {'label': 'negative', 'score': 0.024691764265298843}, {'label': 'neutral', 'score': 0.01989443600177765}]]\n",
            "[[{'label': 'positive', 'score': 0.08675140887498856}, {'label': 'negative', 'score': 0.008640245534479618}, {'label': 'neutral', 'score': 0.9046083688735962}]]\n",
            "[[{'label': 'positive', 'score': 0.029014546424150467}, {'label': 'negative', 'score': 0.021558156237006187}, {'label': 'neutral', 'score': 0.9494273066520691}]]\n",
            "[[{'label': 'positive', 'score': 0.022211425006389618}, {'label': 'negative', 'score': 0.037853360176086426}, {'label': 'neutral', 'score': 0.9399352073669434}]]\n",
            "[[{'label': 'positive', 'score': 0.8745722770690918}, {'label': 'negative', 'score': 0.10561676323413849}, {'label': 'neutral', 'score': 0.019810907542705536}]]\n",
            "[[{'label': 'positive', 'score': 0.020979028195142746}, {'label': 'negative', 'score': 0.03633512929081917}, {'label': 'neutral', 'score': 0.9426858425140381}]]\n",
            "[[{'label': 'positive', 'score': 0.0240410715341568}, {'label': 'negative', 'score': 0.9132157564163208}, {'label': 'neutral', 'score': 0.06274323910474777}]]\n",
            "[[{'label': 'positive', 'score': 0.9567500948905945}, {'label': 'negative', 'score': 0.017512347549200058}, {'label': 'neutral', 'score': 0.025737499818205833}]]\n",
            "[[{'label': 'positive', 'score': 0.06112375855445862}, {'label': 'negative', 'score': 0.014676989056169987}, {'label': 'neutral', 'score': 0.9241992235183716}]]\n",
            "[[{'label': 'positive', 'score': 0.028752150014042854}, {'label': 'negative', 'score': 0.881057620048523}, {'label': 'neutral', 'score': 0.09019026905298233}]]\n",
            "[[{'label': 'positive', 'score': 0.1220448762178421}, {'label': 'negative', 'score': 0.009226253256201744}, {'label': 'neutral', 'score': 0.8687289357185364}]]\n",
            "[[{'label': 'positive', 'score': 0.047405049204826355}, {'label': 'negative', 'score': 0.016414517536759377}, {'label': 'neutral', 'score': 0.9361804127693176}]]\n",
            "[[{'label': 'positive', 'score': 0.02907112054526806}, {'label': 'negative', 'score': 0.9623595476150513}, {'label': 'neutral', 'score': 0.008569399826228619}]]\n",
            "[[{'label': 'positive', 'score': 0.9530327916145325}, {'label': 'negative', 'score': 0.02478739805519581}, {'label': 'neutral', 'score': 0.022179827094078064}]]\n",
            "[[{'label': 'positive', 'score': 0.025852981954813004}, {'label': 'negative', 'score': 0.023947404697537422}, {'label': 'neutral', 'score': 0.9501996040344238}]]\n",
            "[[{'label': 'positive', 'score': 0.033448122441768646}, {'label': 'negative', 'score': 0.025468548759818077}, {'label': 'neutral', 'score': 0.9410833716392517}]]\n",
            "[[{'label': 'positive', 'score': 0.036394309252500534}, {'label': 'negative', 'score': 0.01779913902282715}, {'label': 'neutral', 'score': 0.9458065629005432}]]\n",
            "[[{'label': 'positive', 'score': 0.04603341966867447}, {'label': 'negative', 'score': 0.013455727137625217}, {'label': 'neutral', 'score': 0.9405108094215393}]]\n",
            "[[{'label': 'positive', 'score': 0.03534368425607681}, {'label': 'negative', 'score': 0.02036941982805729}, {'label': 'neutral', 'score': 0.9442868232727051}]]\n",
            "[[{'label': 'positive', 'score': 0.9577513337135315}, {'label': 'negative', 'score': 0.021206185221672058}, {'label': 'neutral', 'score': 0.021042367443442345}]]\n",
            "[[{'label': 'positive', 'score': 0.06408670544624329}, {'label': 'negative', 'score': 0.011863321997225285}, {'label': 'neutral', 'score': 0.924049973487854}]]\n",
            "[[{'label': 'positive', 'score': 0.04094249755144119}, {'label': 'negative', 'score': 0.014855765737593174}, {'label': 'neutral', 'score': 0.9442017078399658}]]\n",
            "[[{'label': 'positive', 'score': 0.9343753457069397}, {'label': 'negative', 'score': 0.0207251887768507}, {'label': 'neutral', 'score': 0.04489949718117714}]]\n",
            "[[{'label': 'positive', 'score': 0.0998578667640686}, {'label': 'negative', 'score': 0.011067935265600681}, {'label': 'neutral', 'score': 0.8890742063522339}]]\n",
            "[[{'label': 'positive', 'score': 0.048085059970617294}, {'label': 'negative', 'score': 0.014860865660011768}, {'label': 'neutral', 'score': 0.9370540380477905}]]\n",
            "[[{'label': 'positive', 'score': 0.039611171931028366}, {'label': 'negative', 'score': 0.040367159992456436}, {'label': 'neutral', 'score': 0.9200217127799988}]]\n",
            "[[{'label': 'positive', 'score': 0.057397738099098206}, {'label': 'negative', 'score': 0.10016358643770218}, {'label': 'neutral', 'score': 0.8424386382102966}]]\n",
            "[[{'label': 'positive', 'score': 0.8272415399551392}, {'label': 'negative', 'score': 0.007917209528386593}, {'label': 'neutral', 'score': 0.16484132409095764}]]\n",
            "[[{'label': 'positive', 'score': 0.03837791457772255}, {'label': 'negative', 'score': 0.013938497751951218}, {'label': 'neutral', 'score': 0.947683572769165}]]\n",
            "[[{'label': 'positive', 'score': 0.057131219655275345}, {'label': 'negative', 'score': 0.016385411843657494}, {'label': 'neutral', 'score': 0.9264833331108093}]]\n",
            "[[{'label': 'positive', 'score': 0.0473652146756649}, {'label': 'negative', 'score': 0.013066796585917473}, {'label': 'neutral', 'score': 0.939568042755127}]]\n",
            "[[{'label': 'positive', 'score': 0.9157949686050415}, {'label': 'negative', 'score': 0.06769561767578125}, {'label': 'neutral', 'score': 0.016509441658854485}]]\n",
            "[[{'label': 'positive', 'score': 0.3514127731323242}, {'label': 'negative', 'score': 0.6242706179618835}, {'label': 'neutral', 'score': 0.024316616356372833}]]\n",
            "[[{'label': 'positive', 'score': 0.03826947882771492}, {'label': 'negative', 'score': 0.01565861515700817}, {'label': 'neutral', 'score': 0.9460719227790833}]]\n",
            "[[{'label': 'positive', 'score': 0.9027217030525208}, {'label': 'negative', 'score': 0.009293177165091038}, {'label': 'neutral', 'score': 0.08798512071371078}]]\n",
            "[[{'label': 'positive', 'score': 0.7724133133888245}, {'label': 'negative', 'score': 0.016557691618800163}, {'label': 'neutral', 'score': 0.21102896332740784}]]\n",
            "[[{'label': 'positive', 'score': 0.9110732674598694}, {'label': 'negative', 'score': 0.007105650380253792}, {'label': 'neutral', 'score': 0.08182110637426376}]]\n",
            "[[{'label': 'positive', 'score': 0.03572758659720421}, {'label': 'negative', 'score': 0.01899753510951996}, {'label': 'neutral', 'score': 0.945274829864502}]]\n",
            "[[{'label': 'positive', 'score': 0.02668914757668972}, {'label': 'negative', 'score': 0.024176111444830894}, {'label': 'neutral', 'score': 0.9491347670555115}]]\n",
            "[[{'label': 'positive', 'score': 0.09877102077007294}, {'label': 'negative', 'score': 0.044081058353185654}, {'label': 'neutral', 'score': 0.8571478724479675}]]\n",
            "[[{'label': 'positive', 'score': 0.05350197106599808}, {'label': 'negative', 'score': 0.010334695689380169}, {'label': 'neutral', 'score': 0.9361633658409119}]]\n",
            "[[{'label': 'positive', 'score': 0.007946183905005455}, {'label': 'negative', 'score': 0.9739954471588135}, {'label': 'neutral', 'score': 0.018058370798826218}]]\n",
            "[[{'label': 'positive', 'score': 0.00659125205129385}, {'label': 'negative', 'score': 0.9756942987442017}, {'label': 'neutral', 'score': 0.01771440915763378}]]\n",
            "[[{'label': 'positive', 'score': 0.025692300871014595}, {'label': 'negative', 'score': 0.2536953389644623}, {'label': 'neutral', 'score': 0.7206123471260071}]]\n",
            "[[{'label': 'positive', 'score': 0.05535542592406273}, {'label': 'negative', 'score': 0.011336438357830048}, {'label': 'neutral', 'score': 0.9333081245422363}]]\n",
            "[[{'label': 'positive', 'score': 0.00907749030739069}, {'label': 'negative', 'score': 0.9752639532089233}, {'label': 'neutral', 'score': 0.01565849967300892}]]\n",
            "[[{'label': 'positive', 'score': 0.008066896349191666}, {'label': 'negative', 'score': 0.9755344390869141}, {'label': 'neutral', 'score': 0.016398683190345764}]]\n",
            "[[{'label': 'positive', 'score': 0.02121821604669094}, {'label': 'negative', 'score': 0.02972622774541378}, {'label': 'neutral', 'score': 0.949055552482605}]]\n",
            "[[{'label': 'positive', 'score': 0.027163701131939888}, {'label': 'negative', 'score': 0.06562488526105881}, {'label': 'neutral', 'score': 0.9072113633155823}]]\n",
            "[[{'label': 'positive', 'score': 0.010028607212007046}, {'label': 'negative', 'score': 0.9681777954101562}, {'label': 'neutral', 'score': 0.021793609485030174}]]\n",
            "[[{'label': 'positive', 'score': 0.00908453855663538}, {'label': 'negative', 'score': 0.9738994836807251}, {'label': 'neutral', 'score': 0.017015991732478142}]]\n",
            "[[{'label': 'positive', 'score': 0.03432953730225563}, {'label': 'negative', 'score': 0.022967947646975517}, {'label': 'neutral', 'score': 0.9427024722099304}]]\n",
            "[[{'label': 'positive', 'score': 0.03928748890757561}, {'label': 'negative', 'score': 0.021188031882047653}, {'label': 'neutral', 'score': 0.9395244717597961}]]\n",
            "[[{'label': 'positive', 'score': 0.031018119305372238}, {'label': 'negative', 'score': 0.025333266705274582}, {'label': 'neutral', 'score': 0.943648636341095}]]\n",
            "[[{'label': 'positive', 'score': 0.00603723106905818}, {'label': 'negative', 'score': 0.9713740944862366}, {'label': 'neutral', 'score': 0.02258872054517269}]]\n",
            "[[{'label': 'positive', 'score': 0.030140817165374756}, {'label': 'negative', 'score': 0.043470460921525955}, {'label': 'neutral', 'score': 0.926388680934906}]]\n",
            "[[{'label': 'positive', 'score': 0.008623224683105946}, {'label': 'negative', 'score': 0.9654967188835144}, {'label': 'neutral', 'score': 0.02588004060089588}]]\n",
            "[[{'label': 'positive', 'score': 0.01342905405908823}, {'label': 'negative', 'score': 0.7606169581413269}, {'label': 'neutral', 'score': 0.22595398128032684}]]\n",
            "[[{'label': 'positive', 'score': 0.9495242238044739}, {'label': 'negative', 'score': 0.026896700263023376}, {'label': 'neutral', 'score': 0.023579049855470657}]]\n",
            "[[{'label': 'positive', 'score': 0.039172928780317307}, {'label': 'negative', 'score': 0.017761940136551857}, {'label': 'neutral', 'score': 0.9430651664733887}]]\n",
            "[[{'label': 'positive', 'score': 0.027024127542972565}, {'label': 'negative', 'score': 0.022547172382473946}, {'label': 'neutral', 'score': 0.9504286646842957}]]\n",
            "[[{'label': 'positive', 'score': 0.05820637196302414}, {'label': 'negative', 'score': 0.9303722977638245}, {'label': 'neutral', 'score': 0.01142125390470028}]]\n",
            "[[{'label': 'positive', 'score': 0.02001134678721428}, {'label': 'negative', 'score': 0.03951418772339821}, {'label': 'neutral', 'score': 0.9404744505882263}]]\n",
            "[[{'label': 'positive', 'score': 0.06111716851592064}, {'label': 'negative', 'score': 0.010853548534214497}, {'label': 'neutral', 'score': 0.9280292987823486}]]\n",
            "[[{'label': 'positive', 'score': 0.738160252571106}, {'label': 'negative', 'score': 0.014609990641474724}, {'label': 'neutral', 'score': 0.24722972512245178}]]\n",
            "[[{'label': 'positive', 'score': 0.9487338662147522}, {'label': 'negative', 'score': 0.02796231023967266}, {'label': 'neutral', 'score': 0.023303775116801262}]]\n",
            "[[{'label': 'positive', 'score': 0.08122791349887848}, {'label': 'negative', 'score': 0.1076219230890274}, {'label': 'neutral', 'score': 0.8111501336097717}]]\n",
            "[[{'label': 'positive', 'score': 0.029338743537664413}, {'label': 'negative', 'score': 0.02219984494149685}, {'label': 'neutral', 'score': 0.9484614133834839}]]\n",
            "[[{'label': 'positive', 'score': 0.009728318080306053}, {'label': 'negative', 'score': 0.9693298935890198}, {'label': 'neutral', 'score': 0.020941782742738724}]]\n",
            "[[{'label': 'positive', 'score': 0.007878994569182396}, {'label': 'negative', 'score': 0.9743717312812805}, {'label': 'neutral', 'score': 0.017749272286891937}]]\n",
            "[[{'label': 'positive', 'score': 0.0070427292957901955}, {'label': 'negative', 'score': 0.9756363034248352}, {'label': 'neutral', 'score': 0.017320940271019936}]]\n",
            "[[{'label': 'positive', 'score': 0.1471332460641861}, {'label': 'negative', 'score': 0.007130161393433809}, {'label': 'neutral', 'score': 0.8457366228103638}]]\n",
            "[[{'label': 'positive', 'score': 0.9532482028007507}, {'label': 'negative', 'score': 0.017757374793291092}, {'label': 'neutral', 'score': 0.028994455933570862}]]\n",
            "[[{'label': 'positive', 'score': 0.19038903713226318}, {'label': 'negative', 'score': 0.008463908918201923}, {'label': 'neutral', 'score': 0.8011470437049866}]]\n",
            "[[{'label': 'positive', 'score': 0.021022427827119827}, {'label': 'negative', 'score': 0.021504953503608704}, {'label': 'neutral', 'score': 0.9574726223945618}]]\n",
            "[[{'label': 'positive', 'score': 0.9491856694221497}, {'label': 'negative', 'score': 0.012215117923915386}, {'label': 'neutral', 'score': 0.03859926015138626}]]\n",
            "[[{'label': 'positive', 'score': 0.11248975992202759}, {'label': 'negative', 'score': 0.010264587588608265}, {'label': 'neutral', 'score': 0.8772456645965576}]]\n",
            "[[{'label': 'positive', 'score': 0.009030927903950214}, {'label': 'negative', 'score': 0.969833493232727}, {'label': 'neutral', 'score': 0.021135559305548668}]]\n",
            "[[{'label': 'positive', 'score': 0.02563956193625927}, {'label': 'negative', 'score': 0.02705259993672371}, {'label': 'neutral', 'score': 0.947307825088501}]]\n",
            "[[{'label': 'positive', 'score': 0.05954236909747124}, {'label': 'negative', 'score': 0.01291616540402174}, {'label': 'neutral', 'score': 0.9275414347648621}]]\n",
            "[[{'label': 'positive', 'score': 0.017531534656882286}, {'label': 'negative', 'score': 0.038979608565568924}, {'label': 'neutral', 'score': 0.9434887766838074}]]\n",
            "[[{'label': 'positive', 'score': 0.9498171210289001}, {'label': 'negative', 'score': 0.03151494637131691}, {'label': 'neutral', 'score': 0.01866794563829899}]]\n",
            "[[{'label': 'positive', 'score': 0.008242374286055565}, {'label': 'negative', 'score': 0.9691660404205322}, {'label': 'neutral', 'score': 0.02259157970547676}]]\n",
            "[[{'label': 'positive', 'score': 0.035143326967954636}, {'label': 'negative', 'score': 0.014850877225399017}, {'label': 'neutral', 'score': 0.9500057697296143}]]\n",
            "[[{'label': 'positive', 'score': 0.04481730982661247}, {'label': 'negative', 'score': 0.017280317842960358}, {'label': 'neutral', 'score': 0.9379023313522339}]]\n",
            "[[{'label': 'positive', 'score': 0.029140133410692215}, {'label': 'negative', 'score': 0.018135659396648407}, {'label': 'neutral', 'score': 0.9527242183685303}]]\n",
            "[[{'label': 'positive', 'score': 0.026599131524562836}, {'label': 'negative', 'score': 0.018436249345541}, {'label': 'neutral', 'score': 0.9549646377563477}]]\n",
            "[[{'label': 'positive', 'score': 0.09108531475067139}, {'label': 'negative', 'score': 0.08221520483493805}, {'label': 'neutral', 'score': 0.8266994953155518}]]\n",
            "[[{'label': 'positive', 'score': 0.08066608011722565}, {'label': 'negative', 'score': 0.01147532369941473}, {'label': 'neutral', 'score': 0.9078586101531982}]]\n",
            "[[{'label': 'positive', 'score': 0.10126636922359467}, {'label': 'negative', 'score': 0.8420302271842957}, {'label': 'neutral', 'score': 0.056703392416238785}]]\n",
            "[[{'label': 'positive', 'score': 0.02006569877266884}, {'label': 'negative', 'score': 0.04264713078737259}, {'label': 'neutral', 'score': 0.9372872114181519}]]\n",
            "[[{'label': 'positive', 'score': 0.02132396213710308}, {'label': 'negative', 'score': 0.04828020930290222}, {'label': 'neutral', 'score': 0.9303958415985107}]]\n",
            "[[{'label': 'positive', 'score': 0.0615137554705143}, {'label': 'negative', 'score': 0.014195100404322147}, {'label': 'neutral', 'score': 0.92429119348526}]]\n",
            "[[{'label': 'positive', 'score': 0.0915023535490036}, {'label': 'negative', 'score': 0.009328152053058147}, {'label': 'neutral', 'score': 0.8991695642471313}]]\n",
            "[[{'label': 'positive', 'score': 0.05880822241306305}, {'label': 'negative', 'score': 0.014603713527321815}, {'label': 'neutral', 'score': 0.9265879988670349}]]\n",
            "[[{'label': 'positive', 'score': 0.018147259950637817}, {'label': 'negative', 'score': 0.030918078497052193}, {'label': 'neutral', 'score': 0.950934648513794}]]\n",
            "[[{'label': 'positive', 'score': 0.15270046889781952}, {'label': 'negative', 'score': 0.011896613985300064}, {'label': 'neutral', 'score': 0.8354029059410095}]]\n",
            "[[{'label': 'positive', 'score': 0.9497696757316589}, {'label': 'negative', 'score': 0.026288343593478203}, {'label': 'neutral', 'score': 0.0239420086145401}]]\n",
            "[[{'label': 'positive', 'score': 0.957273542881012}, {'label': 'negative', 'score': 0.0227704718708992}, {'label': 'neutral', 'score': 0.01995600201189518}]]\n",
            "[[{'label': 'positive', 'score': 0.05034029483795166}, {'label': 'negative', 'score': 0.02263212762773037}, {'label': 'neutral', 'score': 0.9270276427268982}]]\n",
            "[[{'label': 'positive', 'score': 0.0759214237332344}, {'label': 'negative', 'score': 0.011358593590557575}, {'label': 'neutral', 'score': 0.9127200245857239}]]\n",
            "[[{'label': 'positive', 'score': 0.944668710231781}, {'label': 'negative', 'score': 0.018614236265420914}, {'label': 'neutral', 'score': 0.03671710565686226}]]\n",
            "[[{'label': 'positive', 'score': 0.04226260632276535}, {'label': 'negative', 'score': 0.01279686950147152}, {'label': 'neutral', 'score': 0.9449405074119568}]]\n",
            "[[{'label': 'positive', 'score': 0.9532070159912109}, {'label': 'negative', 'score': 0.03089793585240841}, {'label': 'neutral', 'score': 0.01589507982134819}]]\n",
            "[[{'label': 'positive', 'score': 0.9525226354598999}, {'label': 'negative', 'score': 0.024316808208823204}, {'label': 'neutral', 'score': 0.023160526528954506}]]\n",
            "[[{'label': 'positive', 'score': 0.017603684216737747}, {'label': 'negative', 'score': 0.04206892102956772}, {'label': 'neutral', 'score': 0.9403274059295654}]]\n",
            "[[{'label': 'positive', 'score': 0.9564996361732483}, {'label': 'negative', 'score': 0.022236375138163567}, {'label': 'neutral', 'score': 0.021264005452394485}]]\n",
            "[[{'label': 'positive', 'score': 0.10198049247264862}, {'label': 'negative', 'score': 0.010849134996533394}, {'label': 'neutral', 'score': 0.8871703147888184}]]\n",
            "[[{'label': 'positive', 'score': 0.067225381731987}, {'label': 'negative', 'score': 0.01212048064917326}, {'label': 'neutral', 'score': 0.9206541180610657}]]\n",
            "[[{'label': 'positive', 'score': 0.0234792772680521}, {'label': 'negative', 'score': 0.039873044937849045}, {'label': 'neutral', 'score': 0.9366476535797119}]]\n",
            "[[{'label': 'positive', 'score': 0.3154316544532776}, {'label': 'negative', 'score': 0.01914806477725506}, {'label': 'neutral', 'score': 0.6654202938079834}]]\n",
            "[[{'label': 'positive', 'score': 0.0440010130405426}, {'label': 'negative', 'score': 0.014615911990404129}, {'label': 'neutral', 'score': 0.9413830637931824}]]\n",
            "[[{'label': 'positive', 'score': 0.03304487466812134}, {'label': 'negative', 'score': 0.023572314530611038}, {'label': 'neutral', 'score': 0.9433827996253967}]]\n",
            "[[{'label': 'positive', 'score': 0.06961315870285034}, {'label': 'negative', 'score': 0.024773577228188515}, {'label': 'neutral', 'score': 0.9056133031845093}]]\n",
            "[[{'label': 'positive', 'score': 0.02086539752781391}, {'label': 'negative', 'score': 0.9683352708816528}, {'label': 'neutral', 'score': 0.010799361392855644}]]\n",
            "[[{'label': 'positive', 'score': 0.011515336111187935}, {'label': 'negative', 'score': 0.9739671945571899}, {'label': 'neutral', 'score': 0.01451736968010664}]]\n",
            "[[{'label': 'positive', 'score': 0.9348984360694885}, {'label': 'negative', 'score': 0.04353056102991104}, {'label': 'neutral', 'score': 0.021571006625890732}]]\n",
            "[[{'label': 'positive', 'score': 0.9479842185974121}, {'label': 'negative', 'score': 0.015181276947259903}, {'label': 'neutral', 'score': 0.036834608763456345}]]\n",
            "[[{'label': 'positive', 'score': 0.035751357674598694}, {'label': 'negative', 'score': 0.021121744066476822}, {'label': 'neutral', 'score': 0.9431268572807312}]]\n",
            "[[{'label': 'positive', 'score': 0.9584378004074097}, {'label': 'negative', 'score': 0.02175752818584442}, {'label': 'neutral', 'score': 0.019804678857326508}]]\n",
            "[[{'label': 'positive', 'score': 0.006915193051099777}, {'label': 'negative', 'score': 0.9760183095932007}, {'label': 'neutral', 'score': 0.017066525295376778}]]\n",
            "[[{'label': 'positive', 'score': 0.9511358141899109}, {'label': 'negative', 'score': 0.02068168669939041}, {'label': 'neutral', 'score': 0.02818240411579609}]]\n",
            "[[{'label': 'positive', 'score': 0.007721580099314451}, {'label': 'negative', 'score': 0.9737822413444519}, {'label': 'neutral', 'score': 0.01849619671702385}]]\n",
            "[[{'label': 'positive', 'score': 0.011900878511369228}, {'label': 'negative', 'score': 0.9747581481933594}, {'label': 'neutral', 'score': 0.013341005891561508}]]\n",
            "[[{'label': 'positive', 'score': 0.02619120478630066}, {'label': 'negative', 'score': 0.06943999230861664}, {'label': 'neutral', 'score': 0.9043688774108887}]]\n",
            "[[{'label': 'positive', 'score': 0.019742226228117943}, {'label': 'negative', 'score': 0.03614059463143349}, {'label': 'neutral', 'score': 0.9441172480583191}]]\n",
            "[[{'label': 'positive', 'score': 0.0384872704744339}, {'label': 'negative', 'score': 0.014774415642023087}, {'label': 'neutral', 'score': 0.9467383027076721}]]\n",
            "[[{'label': 'positive', 'score': 0.007725690025836229}, {'label': 'negative', 'score': 0.9765880107879639}, {'label': 'neutral', 'score': 0.015686294063925743}]]\n",
            "[[{'label': 'positive', 'score': 0.15872018039226532}, {'label': 'negative', 'score': 0.009947209618985653}, {'label': 'neutral', 'score': 0.8313325643539429}]]\n",
            "[[{'label': 'positive', 'score': 0.953841507434845}, {'label': 'negative', 'score': 0.02759598195552826}, {'label': 'neutral', 'score': 0.01856246404349804}]]\n",
            "[[{'label': 'positive', 'score': 0.039311788976192474}, {'label': 'negative', 'score': 0.01774613745510578}, {'label': 'neutral', 'score': 0.9429420828819275}]]\n",
            "[[{'label': 'positive', 'score': 0.007380063645541668}, {'label': 'negative', 'score': 0.9766526222229004}, {'label': 'neutral', 'score': 0.01596740446984768}]]\n",
            "[[{'label': 'positive', 'score': 0.9431911110877991}, {'label': 'negative', 'score': 0.012491266243159771}, {'label': 'neutral', 'score': 0.04431759938597679}]]\n",
            "[[{'label': 'positive', 'score': 0.9378015995025635}, {'label': 'negative', 'score': 0.03879866376519203}, {'label': 'neutral', 'score': 0.023399749770760536}]]\n",
            "[[{'label': 'positive', 'score': 0.07252277433872223}, {'label': 'negative', 'score': 0.011971605941653252}, {'label': 'neutral', 'score': 0.9155056476593018}]]\n",
            "[[{'label': 'positive', 'score': 0.9555349349975586}, {'label': 'negative', 'score': 0.016868293285369873}, {'label': 'neutral', 'score': 0.027596745640039444}]]\n",
            "[[{'label': 'positive', 'score': 0.9530607461929321}, {'label': 'negative', 'score': 0.0191365834325552}, {'label': 'neutral', 'score': 0.02780258283019066}]]\n",
            "[[{'label': 'positive', 'score': 0.01802227273583412}, {'label': 'negative', 'score': 0.9719225168228149}, {'label': 'neutral', 'score': 0.010055162943899632}]]\n",
            "[[{'label': 'positive', 'score': 0.2461896538734436}, {'label': 'negative', 'score': 0.009785065427422523}, {'label': 'neutral', 'score': 0.7440252304077148}]]\n",
            "[[{'label': 'positive', 'score': 0.029341569170355797}, {'label': 'negative', 'score': 0.018924733623862267}, {'label': 'neutral', 'score': 0.9517336487770081}]]\n",
            "[[{'label': 'positive', 'score': 0.021158117800951004}, {'label': 'negative', 'score': 0.03195313736796379}, {'label': 'neutral', 'score': 0.94688880443573}]]\n",
            "[[{'label': 'positive', 'score': 0.9538991451263428}, {'label': 'negative', 'score': 0.01958162523806095}, {'label': 'neutral', 'score': 0.026519322767853737}]]\n",
            "[[{'label': 'positive', 'score': 0.1176610141992569}, {'label': 'negative', 'score': 0.008666937239468098}, {'label': 'neutral', 'score': 0.8736720681190491}]]\n",
            "[[{'label': 'positive', 'score': 0.016446992754936218}, {'label': 'negative', 'score': 0.03795679286122322}, {'label': 'neutral', 'score': 0.9455962181091309}]]\n",
            "[[{'label': 'positive', 'score': 0.9540295004844666}, {'label': 'negative', 'score': 0.019867796450853348}, {'label': 'neutral', 'score': 0.026102710515260696}]]\n",
            "[[{'label': 'positive', 'score': 0.9551773071289062}, {'label': 'negative', 'score': 0.020433908328413963}, {'label': 'neutral', 'score': 0.02438867837190628}]]\n",
            "[[{'label': 'positive', 'score': 0.11104443669319153}, {'label': 'negative', 'score': 0.008707457222044468}, {'label': 'neutral', 'score': 0.8802481293678284}]]\n",
            "[[{'label': 'positive', 'score': 0.03265593573451042}, {'label': 'negative', 'score': 0.027853820472955704}, {'label': 'neutral', 'score': 0.9394902586936951}]]\n",
            "[[{'label': 'positive', 'score': 0.17113056778907776}, {'label': 'negative', 'score': 0.007455670740455389}, {'label': 'neutral', 'score': 0.8214138150215149}]]\n",
            "[[{'label': 'positive', 'score': 0.05738316476345062}, {'label': 'negative', 'score': 0.01441898662596941}, {'label': 'neutral', 'score': 0.9281979203224182}]]\n",
            "[[{'label': 'positive', 'score': 0.010289601981639862}, {'label': 'negative', 'score': 0.9725458025932312}, {'label': 'neutral', 'score': 0.017164677381515503}]]\n",
            "[[{'label': 'positive', 'score': 0.9523996114730835}, {'label': 'negative', 'score': 0.026067212224006653}, {'label': 'neutral', 'score': 0.021533088758587837}]]\n",
            "[[{'label': 'positive', 'score': 0.014199018478393555}, {'label': 'negative', 'score': 0.7760012745857239}, {'label': 'neutral', 'score': 0.20979972183704376}]]\n",
            "[[{'label': 'positive', 'score': 0.18000371754169464}, {'label': 'negative', 'score': 0.007465073838829994}, {'label': 'neutral', 'score': 0.8125312328338623}]]\n",
            "[[{'label': 'positive', 'score': 0.042340707033872604}, {'label': 'negative', 'score': 0.017612488940358162}, {'label': 'neutral', 'score': 0.9400467872619629}]]\n",
            "[[{'label': 'positive', 'score': 0.06617460399866104}, {'label': 'negative', 'score': 0.010289055295288563}, {'label': 'neutral', 'score': 0.9235363602638245}]]\n",
            "[[{'label': 'positive', 'score': 0.007287065964192152}, {'label': 'negative', 'score': 0.9762543439865112}, {'label': 'neutral', 'score': 0.016458626836538315}]]\n",
            "[[{'label': 'positive', 'score': 0.9300391674041748}, {'label': 'negative', 'score': 0.01267044898122549}, {'label': 'neutral', 'score': 0.05729034170508385}]]\n",
            "[[{'label': 'positive', 'score': 0.19447018206119537}, {'label': 'negative', 'score': 0.007767790928483009}, {'label': 'neutral', 'score': 0.7977620363235474}]]\n",
            "[[{'label': 'positive', 'score': 0.0376817025244236}, {'label': 'negative', 'score': 0.020126596093177795}, {'label': 'neutral', 'score': 0.9421917200088501}]]\n",
            "[[{'label': 'positive', 'score': 0.9543044567108154}, {'label': 'negative', 'score': 0.0235921498388052}, {'label': 'neutral', 'score': 0.02210332825779915}]]\n",
            "[[{'label': 'positive', 'score': 0.00865203607827425}, {'label': 'negative', 'score': 0.9759981036186218}, {'label': 'neutral', 'score': 0.015349860303103924}]]\n",
            "[[{'label': 'positive', 'score': 0.8675944209098816}, {'label': 'negative', 'score': 0.008512063883244991}, {'label': 'neutral', 'score': 0.12389351427555084}]]\n",
            "[[{'label': 'positive', 'score': 0.07614384591579437}, {'label': 'negative', 'score': 0.01982627995312214}, {'label': 'neutral', 'score': 0.9040298461914062}]]\n",
            "[[{'label': 'positive', 'score': 0.8933430314064026}, {'label': 'negative', 'score': 0.006865497678518295}, {'label': 'neutral', 'score': 0.09979142248630524}]]\n",
            "[[{'label': 'positive', 'score': 0.9469502568244934}, {'label': 'negative', 'score': 0.018164701759815216}, {'label': 'neutral', 'score': 0.03488500788807869}]]\n",
            "[[{'label': 'positive', 'score': 0.03409462422132492}, {'label': 'negative', 'score': 0.021784452721476555}, {'label': 'neutral', 'score': 0.9441209435462952}]]\n",
            "[[{'label': 'positive', 'score': 0.10875264555215836}, {'label': 'negative', 'score': 0.010009313002228737}, {'label': 'neutral', 'score': 0.8812380433082581}]]\n",
            "[[{'label': 'positive', 'score': 0.04873024672269821}, {'label': 'negative', 'score': 0.016245555132627487}, {'label': 'neutral', 'score': 0.9350242018699646}]]\n",
            "[[{'label': 'positive', 'score': 0.04032192751765251}, {'label': 'negative', 'score': 0.01421049889177084}, {'label': 'neutral', 'score': 0.9454675912857056}]]\n",
            "[[{'label': 'positive', 'score': 0.12714064121246338}, {'label': 'negative', 'score': 0.008809775114059448}, {'label': 'neutral', 'score': 0.8640495538711548}]]\n",
            "[[{'label': 'positive', 'score': 0.027805102989077568}, {'label': 'negative', 'score': 0.017727911472320557}, {'label': 'neutral', 'score': 0.9544669985771179}]]\n",
            "[[{'label': 'positive', 'score': 0.009395115077495575}, {'label': 'negative', 'score': 0.9755958318710327}, {'label': 'neutral', 'score': 0.01500911358743906}]]\n",
            "[[{'label': 'positive', 'score': 0.022996563464403152}, {'label': 'negative', 'score': 0.024169109761714935}, {'label': 'neutral', 'score': 0.9528343677520752}]]\n",
            "[[{'label': 'positive', 'score': 0.026274291798472404}, {'label': 'negative', 'score': 0.021084144711494446}, {'label': 'neutral', 'score': 0.9526415467262268}]]\n",
            "[[{'label': 'positive', 'score': 0.09781919419765472}, {'label': 'negative', 'score': 0.011076183058321476}, {'label': 'neutral', 'score': 0.8911046385765076}]]\n",
            "[[{'label': 'positive', 'score': 0.042927078902721405}, {'label': 'negative', 'score': 0.013023789040744305}, {'label': 'neutral', 'score': 0.9440491199493408}]]\n",
            "[[{'label': 'positive', 'score': 0.9564366936683655}, {'label': 'negative', 'score': 0.02174019068479538}, {'label': 'neutral', 'score': 0.02182314731180668}]]\n",
            "[[{'label': 'positive', 'score': 0.026271073147654533}, {'label': 'negative', 'score': 0.02690901793539524}, {'label': 'neutral', 'score': 0.9468199610710144}]]\n",
            "[[{'label': 'positive', 'score': 0.02465229481458664}, {'label': 'negative', 'score': 0.020143253728747368}, {'label': 'neutral', 'score': 0.955204427242279}]]\n",
            "[[{'label': 'positive', 'score': 0.041518762707710266}, {'label': 'negative', 'score': 0.011703348718583584}, {'label': 'neutral', 'score': 0.946777880191803}]]\n",
            "[[{'label': 'positive', 'score': 0.07425081729888916}, {'label': 'negative', 'score': 0.009355640970170498}, {'label': 'neutral', 'score': 0.9163935780525208}]]\n",
            "[[{'label': 'positive', 'score': 0.9386220574378967}, {'label': 'negative', 'score': 0.03911808133125305}, {'label': 'neutral', 'score': 0.022259848192334175}]]\n",
            "[[{'label': 'positive', 'score': 0.9510608911514282}, {'label': 'negative', 'score': 0.015047572553157806}, {'label': 'neutral', 'score': 0.03389144688844681}]]\n",
            "[[{'label': 'positive', 'score': 0.03004416823387146}, {'label': 'negative', 'score': 0.020498001947999}, {'label': 'neutral', 'score': 0.9494578242301941}]]\n",
            "[[{'label': 'positive', 'score': 0.9574507474899292}, {'label': 'negative', 'score': 0.023267772048711777}, {'label': 'neutral', 'score': 0.01928149349987507}]]\n",
            "[[{'label': 'positive', 'score': 0.06409528106451035}, {'label': 'negative', 'score': 0.010115432552993298}, {'label': 'neutral', 'score': 0.9257892370223999}]]\n",
            "[[{'label': 'positive', 'score': 0.025920599699020386}, {'label': 'negative', 'score': 0.019773399457335472}, {'label': 'neutral', 'score': 0.9543059468269348}]]\n",
            "[[{'label': 'positive', 'score': 0.048578593879938126}, {'label': 'negative', 'score': 0.012807991355657578}, {'label': 'neutral', 'score': 0.9386134743690491}]]\n",
            "[[{'label': 'positive', 'score': 0.046164046972990036}, {'label': 'negative', 'score': 0.01621607504785061}, {'label': 'neutral', 'score': 0.9376198053359985}]]\n",
            "[[{'label': 'positive', 'score': 0.06567537039518356}, {'label': 'negative', 'score': 0.018246149644255638}, {'label': 'neutral', 'score': 0.916078507900238}]]\n",
            "[[{'label': 'positive', 'score': 0.03345046564936638}, {'label': 'negative', 'score': 0.01493827160447836}, {'label': 'neutral', 'score': 0.9516112208366394}]]\n",
            "[[{'label': 'positive', 'score': 0.025127604603767395}, {'label': 'negative', 'score': 0.35173746943473816}, {'label': 'neutral', 'score': 0.623134970664978}]]\n",
            "[[{'label': 'positive', 'score': 0.09176795929670334}, {'label': 'negative', 'score': 0.019033925607800484}, {'label': 'neutral', 'score': 0.8891981244087219}]]\n",
            "[[{'label': 'positive', 'score': 0.08067703992128372}, {'label': 'negative', 'score': 0.009185893461108208}, {'label': 'neutral', 'score': 0.9101371169090271}]]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "random.seed(127)\n",
        "X_test = X_test.reset_index(drop=True)\n",
        "\n",
        "sample_indices = random.sample(range(len(X_test)), 400)\n",
        "sample_texts = [X_test[i] for i in sample_indices]\n",
        "\n",
        "# Assuming the FinBERT pipeline is already set up\n",
        "finbert_predictions = [finbert_pipeline(text) for text in sample_texts]\n",
        "\n",
        "# Display the predictions\n",
        "for prediction in finbert_predictions:\n",
        "    print(prediction)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "id": "73VLAexBHAya"
      },
      "outputs": [],
      "source": [
        "# Preprocess the text using the preprocess_text function defined earlier if necessary\n",
        "X_test_preprocessed = [preprocess_text(text) for text in X_test]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {
        "id": "hrUtcShUbY_D"
      },
      "outputs": [],
      "source": [
        "# Run FinBERT on the preprocessed test set\n",
        "finbert_predictions = [finbert_pipeline(text) for text in X_test_preprocessed]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9uekLwQsbZCX",
        "outputId": "f9ec1d43-4076-4178-d994-3884023520e9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[{'label': 'positive', 'score': 0.01965958997607231}, {'label': 'negative', 'score': 0.054758939892053604}, {'label': 'neutral', 'score': 0.9255815148353577}]]\n"
          ]
        }
      ],
      "source": [
        "# Check the structure of the first prediction\n",
        "print(finbert_predictions[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tWQmHZANaFWk"
      },
      "source": [
        "The model predicts the label 'neutral' with the highest confidence score of about 0.926, suggesting that the text is most likely to convey a neutral sentiment regarding financial context.\n",
        "\n",
        "The scores for 'positive' and 'negative' labels are significantly lower, indicating that the model is quite confident that the text does not express clear positive or negative sentiment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "iyRMMCcMbZFg"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Create a new LabelEncoder\n",
        "label_encoder_labels = LabelEncoder()\n",
        "\n",
        "# Fit the LabelEncoder with the labels\n",
        "label_encoder_labels.fit(['positive', 'negative', 'neutral'])\n",
        "\n",
        "# Extract the predicted class with the highest score\n",
        "y_pred_finbert = [max(pred_dict, key=lambda x: x['score'])['label'] for prediction in finbert_predictions for pred_dict in prediction]\n",
        "\n",
        "# Transform the predicted labels\n",
        "y_pred_finbert_encoded = [label_encoder_labels.transform([label])[0] for label in y_pred_finbert]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LLjCzUOAbZIp",
        "outputId": "f284a133-2b6e-4b6b-ba3b-f80cbfdadd1d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.869757174392936\n",
            "Precision: 0.8695484862723354\n",
            "Recall: 0.869757174392936\n",
            "F1-Score: 0.8651649144422737\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Compute metrics\n",
        "accuracy = accuracy_score(y_test, y_pred_finbert_encoded)\n",
        "precision, recall, fscore, _ = precision_recall_fscore_support(y_test, y_pred_finbert_encoded, average='weighted')\n",
        "\n",
        "print(f\"Accuracy: {accuracy}\")\n",
        "print(f\"Precision: {precision}\")\n",
        "print(f\"Recall: {recall}\")\n",
        "print(f\"F1-Score: {fscore}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y9dDhfNVbZN3",
        "outputId": "5ef4c074-be13-4926-d971-a3f5bd994a10"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.65      0.61      0.63        59\n",
            "           1       0.89      0.98      0.93       287\n",
            "           2       0.93      0.72      0.81       107\n",
            "\n",
            "    accuracy                           0.87       453\n",
            "   macro avg       0.82      0.77      0.79       453\n",
            "weighted avg       0.87      0.87      0.87       453\n",
            "\n"
          ]
        }
      ],
      "source": [
        "report = classification_report(y_test, y_pred_finbert_encoded, digits=2)\n",
        "\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bu9ZN7Snx9g2"
      },
      "source": [
        "## Comparing models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JMvZYZRCyDne"
      },
      "source": [
        "## Base Line Model:\n",
        "\n",
        "              precision    recall  f1-score   support\n",
        "\n",
        "           0       0.85      0.59      0.70        59\n",
        "           1       0.86      0.97      0.91       287\n",
        "           2       0.83      0.70      0.76       107\n",
        "\n",
        "    accuracy                           0.86       453\n",
        "   \n",
        "   macro avg       0.85      0.75      0.79       453\n",
        "\n",
        "weighted avg       0.86      0.86      0.85       453\n",
        "\n",
        "## FINBERT\n",
        "\n",
        "              precision    recall  f1-score   support\n",
        "\n",
        "           0       0.65      0.61      0.63        59\n",
        "           1       0.89      0.98      0.93       287\n",
        "           2       0.93      0.72      0.81       107\n",
        "\n",
        "    accuracy                           0.87       453\n",
        "   \n",
        "   macro avg       0.82      0.77      0.79       453\n",
        "\n",
        "weighted avg       0.87      0.87      0.87       453"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k9WJ28K302ck"
      },
      "source": [
        "Precision:\n",
        "\n",
        "FinBERT improves precision in classifying the \"neutral\" and \"positive\" sentiments (Classes 1 and 2) but shows an important decrease in precision for the \"negative\" sentiment (Class 0). This indicates that FinBERT is more accurate in predicting the majority classes but less so for the minority class.\n",
        "\n",
        "Recall:\n",
        "\n",
        "There is an improvement in recall for the three classes with FinBERT, indicating it is better at identifying all relevant instances of the data. However, there's a noticeable accuracy for the neutral class, so we have to be careful to not incur into overfiting results.\n",
        "\n",
        "F1-Score:\n",
        "\n",
        "The F1-score, which balances precision and recall, is lower for the \"negative\" sentiment with FinBERT, showing it performs worse overall for this class. However, there's a slight increment in the F1-score for the \"positive\" sentiment, aligning with the trade-off between precision and recall observed.\n",
        "\n",
        "Accuracy:\n",
        "\n",
        "The overall accuracy of FinBERT is slightly higher than the baseline model, indicating a modest improvement in the model's ability to correctly classify all sentiment classes.\n",
        "\n",
        "Macro and Weighted Averages:\n",
        "\n",
        "Both macro and weighted averages for precision, recall, and F1-score show improvements with FinBERT. The macro average, which treats all classes equally, indicates better balance in performance across different sentiments. The weighted average, considering class imbalance, shows FinBERT's performance is favorable when accounting for the distribution of sentiment classes.\n",
        "\n",
        "Interpretation:\n",
        "\n",
        "FinBERT's Strengths: FinBERT shows its strengths in dealing with complex financial texts, likely due to its training on a finance-specific corpus. Its improved precision and recall for certain classes demonstrate its nuanced understanding of financial sentiment.\n",
        "\n",
        "Potential Challenges: The drop in recall for the \"positive\" sentiment indicates potential challenges in identifying all instances of positive sentiments, which might be due to the nuanced language used in financial texts or the model's conservative approach in classifying positive sentiments.\n",
        "\n",
        "Conclusion:\n",
        "\n",
        "FinBERT offers a specialized approach for financial sentiment analysis, showcasing improved accuracy and a better balance in precision and recall across different classes. Its performance suggests it can be a valuable tool for analyzing financial texts, with particular strengths in handling nuanced and domain-specific language. However, like any model, understanding its limitations and the context of its application is crucial for effective use."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O93c0w-33JND"
      },
      "source": [
        "# Financial Sentiment Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jsexYHo6bZQ-",
        "outputId": "dfd8a43f-14a2-4dad-f2d9-5594a14b720a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Dataset({\n",
              "    features: ['text', 'label'],\n",
              "    num_rows: 16990\n",
              "})"
            ]
          },
          "execution_count": 80,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "financial_tweets_topics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "id": "qEBThqplbZUG"
      },
      "outputs": [],
      "source": [
        "# Minimal preprocessing (if necessary)\n",
        "def minimal_preprocess(text):\n",
        "    # Example: Remove URLs\n",
        "    text = re.sub(r'http\\S+', '', text)\n",
        "    return text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "LPFw2ysFbZXN"
      },
      "outputs": [],
      "source": [
        "# Applying FinBERT to the dataset\n",
        "tweets = financial_tweets_topics['text']\n",
        "preprocessed_tweets = [minimal_preprocess(tweet) for tweet in tweets]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "id": "Mn0uctKfbZaF"
      },
      "outputs": [],
      "source": [
        "# Apply FinBERT\n",
        "finbert_predictions = [finbert_pipeline(tweet) for tweet in preprocessed_tweets]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "id": "oD0gPlyDbZc8"
      },
      "outputs": [],
      "source": [
        "# Process predictions to extract the most likely sentiment\n",
        "sentiments = [max(prediction[0], key=lambda x: x['score']) for prediction in finbert_predictions]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VKzHYwh0bZfz",
        "outputId": "cc65dab3-800b-43e5-c4a8-8bc805c8ef13"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "neutral 0.9465755224227905\n",
            "positive 0.7915459871292114\n",
            "negative 0.9613122940063477\n",
            "neutral 0.9303262829780579\n",
            "positive 0.9408702254295349\n",
            "positive 0.5490354895591736\n",
            "positive 0.9155013561248779\n",
            "negative 0.8431029319763184\n",
            "positive 0.8643445372581482\n",
            "positive 0.6992606520652771\n"
          ]
        }
      ],
      "source": [
        "# Example of handling the results\n",
        "for sentiment in sentiments[:10]:  # Displaying the first 10 for brevity\n",
        "    print(sentiment['label'], sentiment['score'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dg70KYtH3nmT"
      },
      "source": [
        "Neutral Sentiments: Tweets with a high confidence score for being neutral likely do not express strong opinions or emotions regarding financial news or events. For instance, a score of 0.9465 for a neutral sentiment suggests the model is quite confident that the tweet does not lean towards positive or negative sentiments.\n",
        "\n",
        "Positive Sentiments: Tweets classified as positive with high confidence scores (e.g., 0.9409) indicate optimistic or favorable views on financial matters. This could be reactions to positive earnings reports, successful mergers, or other beneficial financial developments.\n",
        "\n",
        "Negative Sentiments: A tweet with a high confidence score for negative sentiment (e.g., 0.9613) likely contains pessimistic views or bad news related to financial topics, such as losses, downturns, or scandals."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lbrty51J3wCZ"
      },
      "source": [
        "## Fine tuning Finbert"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "id": "e-1BQWv9HA1O"
      },
      "outputs": [],
      "source": [
        "tokenizer = BertTokenizer.from_pretrained('ProsusAI/finbert')\n",
        "model = BertForSequenceClassification.from_pretrained('ProsusAI/finbert', num_labels=3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "id": "Qz5DmJCF4i61"
      },
      "outputs": [],
      "source": [
        "# Initial train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_preprocessed, y, test_size=0.2, random_state=127)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {
        "id": "FLDsFMM24iuF"
      },
      "outputs": [],
      "source": [
        "# Further split the training set to create a validation set\n",
        "X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=127)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "id": "K5sO2oFX4rlR"
      },
      "outputs": [],
      "source": [
        "# Tokenize your dataset\n",
        "train_encodings = tokenizer(X_train, truncation=True, padding=True, max_length=512)\n",
        "val_encodings = tokenizer(X_val, truncation=True, padding=True, max_length=512)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "id": "Vik4rpOB4uL6"
      },
      "outputs": [],
      "source": [
        "# Convert the encodings and labels to tensors\n",
        "train_encodings_tensors = {key: torch.tensor(val) for key, val in train_encodings.items()}\n",
        "val_encodings_tensors = {key: torch.tensor(val) for key, val in val_encodings.items()}\n",
        "y_train_tensor = torch.tensor(y_train)\n",
        "y_val_tensor = torch.tensor(y_val)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {
        "id": "RrP5RExl4uHg"
      },
      "outputs": [],
      "source": [
        "class FinancialSentimentDataset(Dataset):\n",
        "    def __init__(self, encodings, labels):\n",
        "        self.encodings = encodings\n",
        "        self.labels = labels\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n",
        "        item['labels'] = torch.tensor(self.labels[idx])\n",
        "        return item\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {
        "id": "Bgr25vdm4yJF"
      },
      "outputs": [],
      "source": [
        "# Create TensorDatasets\n",
        "train_dataset = FinancialSentimentDataset(train_encodings, y_train)\n",
        "val_dataset = FinancialSentimentDataset(val_encodings, y_val)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {
        "id": "d3L-KbP74x_R"
      },
      "outputs": [],
      "source": [
        "\n",
        "training_args = TrainingArguments(\n",
        "    output_dir='./results',\n",
        "    num_train_epochs=3,\n",
        "    per_device_train_batch_size=8,\n",
        "    per_device_eval_batch_size=8,\n",
        "    warmup_steps=500,\n",
        "    weight_decay=0.01,\n",
        "    logging_dir='./logs',\n",
        "    logging_steps=10,\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "id": "nP_CHxXo5Cj6"
      },
      "outputs": [],
      "source": [
        "\n",
        "def compute_metrics(eval_pred):\n",
        "    predictions, labels = eval_pred\n",
        "    # Convert logits to predicted class indices\n",
        "    predictions = np.argmax(predictions, axis=1)\n",
        "    # Calculate accuracy\n",
        "    accuracy = accuracy_score(labels, predictions)\n",
        "    # Calculate precision, recall, and F1 score (for binary or multiclass classification)\n",
        "    precision, recall, f1, _ = precision_recall_fscore_support(labels, predictions, average='weighted')\n",
        "    return {\n",
        "        'accuracy': accuracy,\n",
        "        'precision': precision,\n",
        "        'recall': recall,\n",
        "        'f1': f1,\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2-BuhMZQ5Cbe",
        "outputId": "1fc9ea82-5cf4-40c7-e14d-5e7cb5f8dfaf"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/Users/joaquintejo/anaconda3/lib/python3.10/site-packages/transformers/optimization.py:306: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n",
            "  warnings.warn(\n",
            "***** Running training *****\n",
            "  Num examples = 1358\n",
            "  Num Epochs = 3\n",
            "  Instantaneous batch size per device = 8\n",
            "  Total train batch size (w. parallel, distributed & accumulation) = 8\n",
            "  Gradient Accumulation steps = 1\n",
            "  Total optimization steps = 510\n",
            "  Number of trainable parameters = 109484547\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "482c4c96c1a14106869f3e16ba4e0401",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/510 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'loss': 2.9677, 'learning_rate': 1.0000000000000002e-06, 'epoch': 0.06}\n",
            "{'loss': 2.8588, 'learning_rate': 2.0000000000000003e-06, 'epoch': 0.12}\n",
            "{'loss': 2.6142, 'learning_rate': 3e-06, 'epoch': 0.18}\n",
            "{'loss': 1.8568, 'learning_rate': 4.000000000000001e-06, 'epoch': 0.24}\n",
            "{'loss': 1.5854, 'learning_rate': 5e-06, 'epoch': 0.29}\n",
            "{'loss': 1.2272, 'learning_rate': 6e-06, 'epoch': 0.35}\n",
            "{'loss': 0.9346, 'learning_rate': 7.000000000000001e-06, 'epoch': 0.41}\n",
            "{'loss': 0.9524, 'learning_rate': 8.000000000000001e-06, 'epoch': 0.47}\n",
            "{'loss': 0.669, 'learning_rate': 9e-06, 'epoch': 0.53}\n",
            "{'loss': 0.6266, 'learning_rate': 1e-05, 'epoch': 0.59}\n",
            "{'loss': 0.5277, 'learning_rate': 1.1000000000000001e-05, 'epoch': 0.65}\n",
            "{'loss': 0.9569, 'learning_rate': 1.2e-05, 'epoch': 0.71}\n",
            "{'loss': 0.5961, 'learning_rate': 1.3000000000000001e-05, 'epoch': 0.76}\n",
            "{'loss': 0.5336, 'learning_rate': 1.4000000000000001e-05, 'epoch': 0.82}\n",
            "{'loss': 0.4593, 'learning_rate': 1.5e-05, 'epoch': 0.88}\n",
            "{'loss': 0.5785, 'learning_rate': 1.6000000000000003e-05, 'epoch': 0.94}\n",
            "{'loss': 0.5968, 'learning_rate': 1.7000000000000003e-05, 'epoch': 1.0}\n",
            "{'loss': 0.4468, 'learning_rate': 1.8e-05, 'epoch': 1.06}\n",
            "{'loss': 0.4733, 'learning_rate': 1.9e-05, 'epoch': 1.12}\n",
            "{'loss': 0.4224, 'learning_rate': 2e-05, 'epoch': 1.18}\n",
            "{'loss': 0.4035, 'learning_rate': 2.1e-05, 'epoch': 1.24}\n",
            "{'loss': 0.3987, 'learning_rate': 2.2000000000000003e-05, 'epoch': 1.29}\n",
            "{'loss': 0.2884, 'learning_rate': 2.3000000000000003e-05, 'epoch': 1.35}\n",
            "{'loss': 0.5221, 'learning_rate': 2.4e-05, 'epoch': 1.41}\n",
            "{'loss': 0.2864, 'learning_rate': 2.5e-05, 'epoch': 1.47}\n",
            "{'loss': 0.4106, 'learning_rate': 2.6000000000000002e-05, 'epoch': 1.53}\n",
            "{'loss': 0.3923, 'learning_rate': 2.7000000000000002e-05, 'epoch': 1.59}\n",
            "{'loss': 0.3066, 'learning_rate': 2.8000000000000003e-05, 'epoch': 1.65}\n",
            "{'loss': 0.4687, 'learning_rate': 2.9e-05, 'epoch': 1.71}\n",
            "{'loss': 0.2503, 'learning_rate': 3e-05, 'epoch': 1.76}\n",
            "{'loss': 0.3608, 'learning_rate': 3.1e-05, 'epoch': 1.82}\n",
            "{'loss': 0.192, 'learning_rate': 3.2000000000000005e-05, 'epoch': 1.88}\n",
            "{'loss': 0.3932, 'learning_rate': 3.3e-05, 'epoch': 1.94}\n",
            "{'loss': 0.2145, 'learning_rate': 3.4000000000000007e-05, 'epoch': 2.0}\n",
            "{'loss': 0.148, 'learning_rate': 3.5e-05, 'epoch': 2.06}\n",
            "{'loss': 0.2213, 'learning_rate': 3.6e-05, 'epoch': 2.12}\n",
            "{'loss': 0.3412, 'learning_rate': 3.7e-05, 'epoch': 2.18}\n",
            "{'loss': 0.2174, 'learning_rate': 3.8e-05, 'epoch': 2.24}\n",
            "{'loss': 0.359, 'learning_rate': 3.9000000000000006e-05, 'epoch': 2.29}\n",
            "{'loss': 0.2687, 'learning_rate': 4e-05, 'epoch': 2.35}\n",
            "{'loss': 0.3837, 'learning_rate': 4.1e-05, 'epoch': 2.41}\n",
            "{'loss': 0.1999, 'learning_rate': 4.2e-05, 'epoch': 2.47}\n",
            "{'loss': 0.1215, 'learning_rate': 4.3e-05, 'epoch': 2.53}\n",
            "{'loss': 0.1844, 'learning_rate': 4.4000000000000006e-05, 'epoch': 2.59}\n",
            "{'loss': 0.2692, 'learning_rate': 4.5e-05, 'epoch': 2.65}\n",
            "{'loss': 0.2378, 'learning_rate': 4.600000000000001e-05, 'epoch': 2.71}\n",
            "{'loss': 0.1864, 'learning_rate': 4.7e-05, 'epoch': 2.76}\n",
            "{'loss': 0.2145, 'learning_rate': 4.8e-05, 'epoch': 2.82}\n",
            "{'loss': 0.1576, 'learning_rate': 4.9e-05, 'epoch': 2.88}\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Saving model checkpoint to ./results/checkpoint-500\n",
            "Configuration saved in ./results/checkpoint-500/config.json\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'loss': 0.0481, 'learning_rate': 5e-05, 'epoch': 2.94}\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Model weights saved in ./results/checkpoint-500/pytorch_model.bin\n",
            "\n",
            "\n",
            "Training completed. Do not forget to share your model on huggingface.co/models =)\n",
            "\n",
            "\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'loss': 0.3744, 'learning_rate': 0.0, 'epoch': 3.0}\n",
            "{'train_runtime': 646.1492, 'train_samples_per_second': 6.305, 'train_steps_per_second': 0.789, 'train_loss': 0.6020704153706046, 'epoch': 3.0}\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "TrainOutput(global_step=510, training_loss=0.6020704153706046, metrics={'train_runtime': 646.1492, 'train_samples_per_second': 6.305, 'train_steps_per_second': 0.789, 'train_loss': 0.6020704153706046, 'epoch': 3.0})"
            ]
          },
          "execution_count": 95,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "\n",
        "trainer = Trainer(\n",
        "    model=model,\n",
        "    args=training_args,\n",
        "    train_dataset=train_dataset,\n",
        "    eval_dataset=val_dataset,\n",
        "    compute_metrics=compute_metrics,\n",
        ")\n",
        "\n",
        "trainer.train()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hd7zps2F5QQB"
      },
      "source": [
        "## Let's check the result doing a test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {
        "id": "9YP2WSV75RmQ"
      },
      "outputs": [],
      "source": [
        "#Preparering Test Set\n",
        "test_encodings = tokenizer(X_test, truncation=True, padding=True, max_length=512)\n",
        "test_dataset = FinancialSentimentDataset(test_encodings, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "LxcS1yZi5T7O",
        "outputId": "acfbdae1-7db5-44d2-91d6-8839ddec3b23"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "***** Running Evaluation *****\n",
            "  Num examples = 453\n",
            "  Batch size = 8\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1954d26321cd4d9792cb846dda5f86bd",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/57 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "results = trainer.evaluate(test_dataset)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-893U2_95Xo-",
        "outputId": "d5122c6d-b0fd-4a2f-a13a-0ce4f7ab5262"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'eval_loss': 0.5037200450897217, 'eval_accuracy': 0.9050772626931567, 'eval_precision': 0.911755264796394, 'eval_recall': 0.9050772626931567, 'eval_f1': 0.8986691304235931, 'eval_runtime': 19.3504, 'eval_samples_per_second': 23.41, 'eval_steps_per_second': 2.946, 'epoch': 3.0}\n",
            "Accuracy: 0.9050772626931567\n"
          ]
        }
      ],
      "source": [
        "print(results)\n",
        "# To access specific metrics, such as accuracy:\n",
        "accuracy = results.get(\"eval_accuracy\")\n",
        "print(f\"Accuracy: {accuracy}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4-1R1qykbmdq"
      },
      "source": [
        "The overall Accuracy: 0.9072847682119205 reiterates the eval_accuracy and confirms that the model performs well on the evaluation dataset.\n",
        "\n",
        "These results suggest that the model has learned effectively from the training data and generalizes well to new data, provided that the test dataset is representative of the real-world data the model is expected to work with. High precision and recall indicate that the model is both relevant (not many false positives) and complete (not many false negatives) in its predictions.\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "006e407ad25f4713ab2ceeba2df883f8": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a35ad61bd83f4a988815d392e3b5edc9",
            "placeholder": "​",
            "style": "IPY_MODEL_020bdb3396dd4e8e8bb922cd2b44ebb2",
            "value": " 232k/232k [00:00&lt;00:00, 1.77MB/s]"
          }
        },
        "020bdb3396dd4e8e8bb922cd2b44ebb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "024bdc16f29a4304979a7292f8134428": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "027fd11f26e241c8a7a56ec50490b47a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "038f66c2578d444da6b5e9e4b80032a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "04dbfe8a6c2e4cd59047682c6f911335": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0598b60e26bc47f2a126a64dbfe4f188": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9c6592411abd44059a61c578e9487b2e",
            "max": 231508,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7a8de4ee09a34d678f14adb17c6c3774",
            "value": 231508
          }
        },
        "07177f0b99804028aa0c05584de7aaa9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "072b063d078749fcaa583df2d749e54b": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "08fa21bf5efa48e58e5e44a1309ceff9": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7d2469ad16034fc98d7150fd1c1ef949",
            "placeholder": "​",
            "style": "IPY_MODEL_48e961e70fb843ee9a6456be125eeab1",
            "value": " 4217/4217 [00:00&lt;00:00, 100394.37 examples/s]"
          }
        },
        "0aeebe04ce6940a6b3614180e3c7d7c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_80b667d0db2b4334959822046321b1c5",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d4a7082753354bc4a6989b279af92e51",
            "value": 1
          }
        },
        "0ba03fd4c2264336baff865043121f69": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0c16a15c850546c5a88ed4228ddb2475": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0c8aa381b2854e18aed3390d311cea4a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0ce04e0735da4b9a9416c2cb4c7421f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c55a9b7ec0c6474ba4aec638e44ff39a",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b579091208074e87aace4fa0c54bbfbf",
            "value": 112
          }
        },
        "0d2ffbc379b446ce82eff3e916d3c51f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0eae23c27bb2438a959bb0081d36d93a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "100d0f18a3b942059b8e5223b18c010c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_04dbfe8a6c2e4cd59047682c6f911335",
            "placeholder": "​",
            "style": "IPY_MODEL_c5083b0b3f1443c9aba87e45293d5aef",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "11a88705a38b4dada31dad7624454b28": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "11e4ab2a114f46bbb3a5ee3d3223df67": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "1350b65afde74f14a99d8a686db1a0ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3b72396c86904d90aa4648eac814af5d",
            "placeholder": "​",
            "style": "IPY_MODEL_6cf672061dcd4bfbb0824094ec534f50",
            "value": " 112/112 [00:00&lt;00:00, 1.11kB/s]"
          }
        },
        "13ce282cbe8548a29b5a53e1afaa8633": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "143115e7d7c94d10a1bbdb11ab66799a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f6b7f1a46697439e9c56d14021172ae6",
              "IPY_MODEL_0aeebe04ce6940a6b3614180e3c7d7c6",
              "IPY_MODEL_546f0da33a904a9fa10366236bb33547"
            ],
            "layout": "IPY_MODEL_df6288c69c85439996ed9cbaa26c303e"
          }
        },
        "147e4c3c18b74093b02692e2d27647d5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "1570c2100fa94b158fa7a3a620ad45ce": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "16da3aac64594ea6a482c32412066452": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1adcd45dc4974d83a7497780f2d679ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ab72a2a199e94427a297ccb22f344142",
              "IPY_MODEL_b3565829ef9a4607b666b7293d595010",
              "IPY_MODEL_7b2da76610324c699ffe7585dde61d73"
            ],
            "layout": "IPY_MODEL_4433bf8c1fef4ef680d6106d9d4796c7"
          }
        },
        "1d5ee2ca3f9542f186e7b9fa5121079c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1f51a740bf454971a2f9fa457237cea5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_26e578c3eebe4f48a0e2613a2ee1aa32",
            "max": 437992753,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_47c1080a88e641bb81156e5bbe144333",
            "value": 437992753
          }
        },
        "21412f95916d40b09f8d7a5334d0b8f7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "21d520cf0fbc432792952c6dcf6d6211": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a2f52464d25a43f088db7ea00f1bba2d",
            "max": 338693,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fc9bb5f4478e4065b468f81b57364a29",
            "value": 338693
          }
        },
        "253e0455dfaa4410b7d3c38e645abbf9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "26cff003040c44e79fe06c739f18969f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_37a04aa27dab42b6849bd8dc8af77312",
            "placeholder": "​",
            "style": "IPY_MODEL_21412f95916d40b09f8d7a5334d0b8f7",
            "value": "vocab.txt: 100%"
          }
        },
        "26e578c3eebe4f48a0e2613a2ee1aa32": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2735d7d5005d45a39dd2e46a73c8b6bf": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2796f09828644c62a95446f93b277b5a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b11bf5279ad409496e96462c12d6c33": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2b32bfcba135463da0dab9ac856abe90": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2b57a18a1d47406bb471208cafb77f21": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b75fa34396e4ce8a213c16bd8d491d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6f4beab452754ff0bede0256fa4fa2f0",
            "placeholder": "​",
            "style": "IPY_MODEL_2b11bf5279ad409496e96462c12d6c33",
            "value": " 1.97k/1.97k [00:00&lt;00:00, 20.7kB/s]"
          }
        },
        "2f733b599ab64e6cb3963d93768323b1": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "301d41c6353348909fa825cf23c87849": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "343808aa181b493dad95b4d5982c3ea1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e4a0b14a5d1748dfb17640395e2f6fe2",
            "max": 2264,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_958953046066497dab92d823ec867b35",
            "value": 2264
          }
        },
        "37a04aa27dab42b6849bd8dc8af77312": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "37c9b2ed7b8c44cb834090615a9693ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "3a2683a29df043888778ad7c9ff112f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_96a0860267cf4499a5880661eacc78cc",
            "placeholder": "​",
            "style": "IPY_MODEL_a7f49070788b447185b4d631f51dcc71",
            "value": "Downloading data: 100%"
          }
        },
        "3b72396c86904d90aa4648eac814af5d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3b72ec7f0c8a472c8e6b270bbcf5105d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3bc4feb176d14034a2171eac7b4d7da3": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d85574f861604b4f85a276e8eef392fa",
              "IPY_MODEL_84b458407b2b4a62bba9e34caa66c916",
              "IPY_MODEL_5a9203ea2a774a2fb02e7484d0027d59"
            ],
            "layout": "IPY_MODEL_072b063d078749fcaa583df2d749e54b"
          }
        },
        "3ce6e4a6d6484a48afd2d1c46982a382": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3d4a63d052c440d7921744f988ec55bc": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3e4d45d97d044818a47d27e8fcf91bfb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d893e2c9b916482e9d015a1dc6c7dc94",
              "IPY_MODEL_62c1651021344ed18a4dc8b7f0fe3cfe",
              "IPY_MODEL_cddf10e921ed4d058a6edc95a08d2e46"
            ],
            "layout": "IPY_MODEL_9fce8ce4b6e44ccd8c1c1979dc23a382"
          }
        },
        "3f8e5960081b41d9b29608d05822034c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "43a8bc9bdb724bbdbd9e097b0e429171": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "44255f512f14404890228f963a37e6ec": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4433bf8c1fef4ef680d6106d9d4796c7": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "459b41349b1642518da1e936f82027cf": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "47c1080a88e641bb81156e5bbe144333": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "48b72fb4e59c4565a26b3cb96e0b3355": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "48e961e70fb843ee9a6456be125eeab1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4ceb5520e24a461eb90b71d769d2dfb0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4ff0ef23972b4c42856886ff333edec6": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c89e50e414a54f43ae143d49e748056f",
            "placeholder": "​",
            "style": "IPY_MODEL_6e775595e04b4d1aa683770243d5866d",
            "value": " 3453/3453 [00:00&lt;00:00, 51828.04 examples/s]"
          }
        },
        "51af4667a5f74bff8a26ff63f1eb8f89": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_acbae24602a94eb9a9f5de68d346ccbb",
            "max": 4846,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_634da0f8e59e49d59edda19527ecea72",
            "value": 4846
          }
        },
        "525c47ae803742ee827f5bdb04fdd9ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "52d93dfc80994f858cbf465fe9203bc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0ba03fd4c2264336baff865043121f69",
            "max": 2385009,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_37c9b2ed7b8c44cb834090615a9693ec",
            "value": 2385009
          }
        },
        "531367c5892b467d866bddd43ccd6d37": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "53351488526c46b5acf7dceb6a0d1767": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_63e4b2175d7f4ad78216835a668ef266",
            "max": 758,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9ca9ed96ec7c4166ac1865d8747143b3",
            "value": 758
          }
        },
        "53fb110cc39b480592641772c2ea5ea8": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "546f0da33a904a9fa10366236bb33547": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ddc57359144f4da0843a107063ddc798",
            "placeholder": "​",
            "style": "IPY_MODEL_63a25d61e19549baade1f1bc890d0869",
            "value": " 16990/0 [00:00&lt;00:00, 54502.48 examples/s]"
          }
        },
        "551df3d403f74799b5032bb12c803ad3": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5595d05c6cdd4684ae9eb9beb14b7b8b": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5a9203ea2a774a2fb02e7484d0027d59": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2f733b599ab64e6cb3963d93768323b1",
            "placeholder": "​",
            "style": "IPY_MODEL_c44ce418a6cf47bb976bf940f1534306",
            "value": " 580k/580k [00:00&lt;00:00, 2.49MB/s]"
          }
        },
        "5b994a2e540446ba821c440f6b45e007": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3b72ec7f0c8a472c8e6b270bbcf5105d",
            "placeholder": "​",
            "style": "IPY_MODEL_be874817a96a4be7bf0f7bee6e4e4a6a",
            "value": " 269k/269k [00:00&lt;00:00, 1.40MB/s]"
          }
        },
        "5de1bb7c75ac44f4ab1e111deab13982": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_26cff003040c44e79fe06c739f18969f",
              "IPY_MODEL_0598b60e26bc47f2a126a64dbfe4f188",
              "IPY_MODEL_006e407ad25f4713ab2ceeba2df883f8"
            ],
            "layout": "IPY_MODEL_e5a8d8fc939e42239e3f0471275086c7"
          }
        },
        "60abc0396aeb4b609c03be1b829f2b9d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1d5ee2ca3f9542f186e7b9fa5121079c",
            "placeholder": "​",
            "style": "IPY_MODEL_027fd11f26e241c8a7a56ec50490b47a",
            "value": " 392k/392k [00:00&lt;00:00, 1.32MB/s]"
          }
        },
        "62b318dc35864075a687612582062094": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "62c1651021344ed18a4dc8b7f0fe3cfe": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e214be4b37ee4f7d8fd89956f2eca860",
            "max": 170521,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0eae23c27bb2438a959bb0081d36d93a",
            "value": 170521
          }
        },
        "63194e81e7f3430c9fd3d2ab430e52ab": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "634da0f8e59e49d59edda19527ecea72": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "63a25d61e19549baade1f1bc890d0869": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "63e4b2175d7f4ad78216835a668ef266": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "64657f1aa4f849fda3ee7e729c810507": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2735d7d5005d45a39dd2e46a73c8b6bf",
            "placeholder": "​",
            "style": "IPY_MODEL_0c16a15c850546c5a88ed4228ddb2475",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "65ae71406b2d480db81ce1688549e06c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ee817ac02f9741ebbedf1a4d818fe8e2",
            "placeholder": "​",
            "style": "IPY_MODEL_e352d17a9b4e4c52b9ea337d09170b29",
            "value": " 4846/4846 [00:00&lt;00:00, 82058.31 examples/s]"
          }
        },
        "65eb64ea17a7405abb6b47e749f665bf": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "668d79c9c51947c5931e5871da6bdd4a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3a2683a29df043888778ad7c9ff112f1",
              "IPY_MODEL_a85512188b21475aaa503155e41e86d3",
              "IPY_MODEL_5b994a2e540446ba821c440f6b45e007"
            ],
            "layout": "IPY_MODEL_301d41c6353348909fa825cf23c87849"
          }
        },
        "6811b54490904d318c10cc6412969967": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "69aa7059277445b48b054e0deaa08e42": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_53fb110cc39b480592641772c2ea5ea8",
            "max": 1971,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d6600d5615fa4609a3627ce6ade2d374",
            "value": 1971
          }
        },
        "6cf672061dcd4bfbb0824094ec534f50": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6e775595e04b4d1aa683770243d5866d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6f4beab452754ff0bede0256fa4fa2f0": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6f50fcbdbfd8419cb38593f5e0ffb4d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f7efc50478cb49f8bdf247ec00cd140d",
            "placeholder": "​",
            "style": "IPY_MODEL_6811b54490904d318c10cc6412969967",
            "value": " 252/252 [00:00&lt;00:00, 7.78kB/s]"
          }
        },
        "6f5f5949250d467ead4a5563d679d127": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ba783416639e4ac3bbab5d748e265fe5",
              "IPY_MODEL_52d93dfc80994f858cbf465fe9203bc2",
              "IPY_MODEL_97c1dd9aae44407dbe479445b79f6f9c"
            ],
            "layout": "IPY_MODEL_024bdc16f29a4304979a7292f8134428"
          }
        },
        "71453af887b6425cb6401ec2a4a8819b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "752ab63b6e8c479aaffa2345525f9176": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7835d30a693e4bd4be212746c1167844": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7928a147f4304ead94ad184f092b9fc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_100d0f18a3b942059b8e5223b18c010c",
              "IPY_MODEL_0ce04e0735da4b9a9416c2cb4c7421f4",
              "IPY_MODEL_1350b65afde74f14a99d8a686db1a0ad"
            ],
            "layout": "IPY_MODEL_551df3d403f74799b5032bb12c803ad3"
          }
        },
        "79cb9cbcc62d4cf495d9a84098a1e266": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7a8de4ee09a34d678f14adb17c6c3774": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7b2da76610324c699ffe7585dde61d73": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fd10e4d4335349b084aa1049309ba821",
            "placeholder": "​",
            "style": "IPY_MODEL_f18efe5b66fc44c7bb0a49c2d70e05cd",
            "value": " 4117/0 [00:00&lt;00:00, 51116.89 examples/s]"
          }
        },
        "7c79e734d9804f3697b10882a6213ecb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_752ab63b6e8c479aaffa2345525f9176",
            "placeholder": "​",
            "style": "IPY_MODEL_7835d30a693e4bd4be212746c1167844",
            "value": "Downloading readme: 100%"
          }
        },
        "7d2469ad16034fc98d7150fd1c1ef949": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7d92ea49afab43c58454588f24c45e0f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bf45f1e2c4bb4b2597ce75d8b788f0e9",
            "max": 4217,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ac5c1d441b7547afa80d502c5807abfd",
            "value": 4217
          }
        },
        "7de422a2681f45a28ced5fb598949d3a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "80b667d0db2b4334959822046321b1c5": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "845e3876fb7746fb9adc4fc687e91f10": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5595d05c6cdd4684ae9eb9beb14b7b8b",
            "placeholder": "​",
            "style": "IPY_MODEL_8e5d17dbb31d4623be6d4ac50c0fdd61",
            "value": "Downloading data: 100%"
          }
        },
        "84b458407b2b4a62bba9e34caa66c916": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_977dc5c855ae40b3bcf2166229e49a91",
            "max": 580140,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_525c47ae803742ee827f5bdb04fdd9ba",
            "value": 580140
          }
        },
        "86df7cb48c9f44f89ba1d6130e80bf6c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_7c79e734d9804f3697b10882a6213ecb",
              "IPY_MODEL_69aa7059277445b48b054e0deaa08e42",
              "IPY_MODEL_2b75fa34396e4ce8a213c16bd8d491d9"
            ],
            "layout": "IPY_MODEL_9a5ba1677e1e439e9799fceb80553240"
          }
        },
        "8b94b779b7a842bc843f2c74bb561f8d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8c9e78234000468780215ce98c1c82c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3f8e5960081b41d9b29608d05822034c",
            "placeholder": "​",
            "style": "IPY_MODEL_eb751fa48e494f63b6851e8e9466ac4a",
            "value": "Generating train split: 100%"
          }
        },
        "8cd2f177dc8348739ab1dfd9a3f6b4b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8c9e78234000468780215ce98c1c82c4",
              "IPY_MODEL_343808aa181b493dad95b4d5982c3ea1",
              "IPY_MODEL_d40cdb76f1c14bff8da71b26ab2b1162"
            ],
            "layout": "IPY_MODEL_bd0522babebc46d3a4ff272caab00fcd"
          }
        },
        "8d75e7d7d281411bb0cf1a199beca82d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8e212c14cc044cc69f1d5c85388d308c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8e5d17dbb31d4623be6d4ac50c0fdd61": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8e61079146124ffe9a5238bb0e41db60": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e2ad4034d67d4a98992d5740859eb6d7",
              "IPY_MODEL_1f51a740bf454971a2f9fa457237cea5",
              "IPY_MODEL_92c7a01d5f75408599cfb800a088c245"
            ],
            "layout": "IPY_MODEL_bba493b73f294eb3a291b7b1c01eae9c"
          }
        },
        "8f29b44a6efb4393ac23f61c93633958": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "916fa8bfef7f46cc94239f9260d7469c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_64657f1aa4f849fda3ee7e729c810507",
              "IPY_MODEL_98b805228a824dbd8bb985fc0367c0bb",
              "IPY_MODEL_6f50fcbdbfd8419cb38593f5e0ffb4d1"
            ],
            "layout": "IPY_MODEL_dfe14b121b0942a684c82fa2d38de0e1"
          }
        },
        "91f260a09a2441dfb1c079e2bee3c60c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bb9e4cc9f77d4224b7a226c779640bf4",
            "placeholder": "​",
            "style": "IPY_MODEL_a589c9153e3543469c6e835508992db5",
            "value": "Downloading data: 100%"
          }
        },
        "92c7a01d5f75408599cfb800a088c245": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_16da3aac64594ea6a482c32412066452",
            "placeholder": "​",
            "style": "IPY_MODEL_43a8bc9bdb724bbdbd9e097b0e429171",
            "value": " 438M/438M [00:04&lt;00:00, 130MB/s]"
          }
        },
        "93b47177ccc144a593a5cd25a82fc253": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9437ebbe2d6b4319bb9c8d7aeb463669": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "958953046066497dab92d823ec867b35": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "96a0860267cf4499a5880661eacc78cc": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "977dc5c855ae40b3bcf2166229e49a91": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "97c1dd9aae44407dbe479445b79f6f9c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ff6a326f34644cd0ab69ac273ef0bac6",
            "placeholder": "​",
            "style": "IPY_MODEL_0d2ffbc379b446ce82eff3e916d3c51f",
            "value": " 2.39M/2.39M [00:00&lt;00:00, 6.45MB/s]"
          }
        },
        "98b805228a824dbd8bb985fc0367c0bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2796f09828644c62a95446f93b277b5a",
            "max": 252,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8d75e7d7d281411bb0cf1a199beca82d",
            "value": 252
          }
        },
        "9a5ba1677e1e439e9799fceb80553240": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9c6592411abd44059a61c578e9487b2e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9ca9ed96ec7c4166ac1865d8747143b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9dca2058a626458fb310f7e50f907547": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bdeb354b47694d4694bf52cf33b00015",
            "max": 392286,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_147e4c3c18b74093b02692e2d27647d5",
            "value": 392286
          }
        },
        "9f9a64ccdba94f379bf5176f66060368": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9437ebbe2d6b4319bb9c8d7aeb463669",
            "max": 3453,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_62b318dc35864075a687612582062094",
            "value": 3453
          }
        },
        "9fce8ce4b6e44ccd8c1c1979dc23a382": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a2f52464d25a43f088db7ea00f1bba2d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a35ad61bd83f4a988815d392e3b5edc9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a589c9153e3543469c6e835508992db5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a7f49070788b447185b4d631f51dcc71": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a85512188b21475aaa503155e41e86d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ac678f8305784d8cad4d97f7053f3753",
            "max": 268502,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f55a322d8aba43b7be05d6d64eeda43a",
            "value": 268502
          }
        },
        "ab02b33993d8449c87763148eafeebc1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ab72a2a199e94427a297ccb22f344142": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cdf7a35805b14b66b477f215713e898a",
            "placeholder": "​",
            "style": "IPY_MODEL_f739dc74afab4fbf8192ec7aa3a4cb5b",
            "value": "Generating validation split: "
          }
        },
        "ac5c1d441b7547afa80d502c5807abfd": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ac678f8305784d8cad4d97f7053f3753": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "acbae24602a94eb9a9f5de68d346ccbb": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3565829ef9a4607b666b7293d595010": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_11e4ab2a114f46bbb3a5ee3d3223df67",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_4ceb5520e24a461eb90b71d769d2dfb0",
            "value": 1
          }
        },
        "b579091208074e87aace4fa0c54bbfbf": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b6f9c2501a7b4fefb989af60b240d760": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b77afc2c844b41efaed1cddab7ee1249": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8b94b779b7a842bc843f2c74bb561f8d",
            "placeholder": "​",
            "style": "IPY_MODEL_93b47177ccc144a593a5cd25a82fc253",
            "value": "config.json: 100%"
          }
        },
        "ba783416639e4ac3bbab5d748e265fe5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_65eb64ea17a7405abb6b47e749f665bf",
            "placeholder": "​",
            "style": "IPY_MODEL_2b32bfcba135463da0dab9ac856abe90",
            "value": "Downloading data: 100%"
          }
        },
        "bb9e4cc9f77d4224b7a226c779640bf4": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bba493b73f294eb3a291b7b1c01eae9c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bd0522babebc46d3a4ff272caab00fcd": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bdeb354b47694d4694bf52cf33b00015": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "be874817a96a4be7bf0f7bee6e4e4a6a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bf45f1e2c4bb4b2597ce75d8b788f0e9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c2aefdeebad04fb3a6ec04e5c7886436": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b77afc2c844b41efaed1cddab7ee1249",
              "IPY_MODEL_53351488526c46b5acf7dceb6a0d1767",
              "IPY_MODEL_d8f371f05d554113980be423619e413a"
            ],
            "layout": "IPY_MODEL_e633c0c0a36a4933a7f1a63268eb488d"
          }
        },
        "c44ce418a6cf47bb976bf940f1534306": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c4ecb1fecd7a4efa9c0fdfd3f42fc807": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c5083b0b3f1443c9aba87e45293d5aef": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c55a9b7ec0c6474ba4aec638e44ff39a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c89e50e414a54f43ae143d49e748056f": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c9735d3453a74eddaccda82dbccbc158": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_845e3876fb7746fb9adc4fc687e91f10",
              "IPY_MODEL_9dca2058a626458fb310f7e50f907547",
              "IPY_MODEL_60abc0396aeb4b609c03be1b829f2b9d"
            ],
            "layout": "IPY_MODEL_253e0455dfaa4410b7d3c38e645abbf9"
          }
        },
        "ca0bf417b1f243cd826dddd127557734": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ffeedd08e56c4c2a94e1752b20e2c138",
              "IPY_MODEL_51af4667a5f74bff8a26ff63f1eb8f89",
              "IPY_MODEL_65ae71406b2d480db81ce1688549e06c"
            ],
            "layout": "IPY_MODEL_48b72fb4e59c4565a26b3cb96e0b3355"
          }
        },
        "cddf10e921ed4d058a6edc95a08d2e46": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_531367c5892b467d866bddd43ccd6d37",
            "placeholder": "​",
            "style": "IPY_MODEL_fa720d8e72654303a1dcd2073415dcbb",
            "value": " 171k/171k [00:00&lt;00:00, 880kB/s]"
          }
        },
        "cdf7a35805b14b66b477f215713e898a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d3462fa932df493c881b642f11b31e3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8e212c14cc044cc69f1d5c85388d308c",
            "placeholder": "​",
            "style": "IPY_MODEL_0c8aa381b2854e18aed3390d311cea4a",
            "value": "Generating train split: 100%"
          }
        },
        "d40cdb76f1c14bff8da71b26ab2b1162": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_07177f0b99804028aa0c05584de7aaa9",
            "placeholder": "​",
            "style": "IPY_MODEL_dc950c3f466249d2ac648bb8de8cbec4",
            "value": " 2264/2264 [00:00&lt;00:00, 31384.05 examples/s]"
          }
        },
        "d4a7082753354bc4a6989b279af92e51": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d6600d5615fa4609a3627ce6ade2d374": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d85574f861604b4f85a276e8eef392fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_79cb9cbcc62d4cf495d9a84098a1e266",
            "placeholder": "​",
            "style": "IPY_MODEL_11a88705a38b4dada31dad7624454b28",
            "value": "Downloading data: 100%"
          }
        },
        "d893e2c9b916482e9d015a1dc6c7dc94": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7de422a2681f45a28ced5fb598949d3a",
            "placeholder": "​",
            "style": "IPY_MODEL_8f29b44a6efb4393ac23f61c93633958",
            "value": "Downloading data: 100%"
          }
        },
        "d8e7d86d886e45d4ad7b82a195a0d398": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_44255f512f14404890228f963a37e6ec",
            "placeholder": "​",
            "style": "IPY_MODEL_ab02b33993d8449c87763148eafeebc1",
            "value": "Generating train split: 100%"
          }
        },
        "d8f371f05d554113980be423619e413a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1570c2100fa94b158fa7a3a620ad45ce",
            "placeholder": "​",
            "style": "IPY_MODEL_c4ecb1fecd7a4efa9c0fdfd3f42fc807",
            "value": " 758/758 [00:00&lt;00:00, 16.3kB/s]"
          }
        },
        "dc950c3f466249d2ac648bb8de8cbec4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ddc57359144f4da0843a107063ddc798": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "df6288c69c85439996ed9cbaa26c303e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dfe14b121b0942a684c82fa2d38de0e1": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e214be4b37ee4f7d8fd89956f2eca860": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e2ad4034d67d4a98992d5740859eb6d7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_63194e81e7f3430c9fd3d2ab430e52ab",
            "placeholder": "​",
            "style": "IPY_MODEL_3ce6e4a6d6484a48afd2d1c46982a382",
            "value": "pytorch_model.bin: 100%"
          }
        },
        "e2c5db8544a94909b8c6dfe5f21daef1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_91f260a09a2441dfb1c079e2bee3c60c",
              "IPY_MODEL_21d520cf0fbc432792952c6dcf6d6211",
              "IPY_MODEL_f7bd1a44785944e59cb99159282e0373"
            ],
            "layout": "IPY_MODEL_3d4a63d052c440d7921744f988ec55bc"
          }
        },
        "e352d17a9b4e4c52b9ea337d09170b29": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e4a0b14a5d1748dfb17640395e2f6fe2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e5a8d8fc939e42239e3f0471275086c7": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e633c0c0a36a4933a7f1a63268eb488d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eb751fa48e494f63b6851e8e9466ac4a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "eb9e6f03a4b24ccaae51e3f9f5a61e69": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d8e7d86d886e45d4ad7b82a195a0d398",
              "IPY_MODEL_9f9a64ccdba94f379bf5176f66060368",
              "IPY_MODEL_4ff0ef23972b4c42856886ff333edec6"
            ],
            "layout": "IPY_MODEL_2b57a18a1d47406bb471208cafb77f21"
          }
        },
        "ed8b24b4861c4c3fb6e1ad986f0ace8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ee817ac02f9741ebbedf1a4d818fe8e2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f18efe5b66fc44c7bb0a49c2d70e05cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f55a322d8aba43b7be05d6d64eeda43a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f6b7f1a46697439e9c56d14021172ae6": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f826858e94a6413783bbfdbdacee8f96",
            "placeholder": "​",
            "style": "IPY_MODEL_038f66c2578d444da6b5e9e4b80032a0",
            "value": "Generating train split: "
          }
        },
        "f739dc74afab4fbf8192ec7aa3a4cb5b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f7bd1a44785944e59cb99159282e0373": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_459b41349b1642518da1e936f82027cf",
            "placeholder": "​",
            "style": "IPY_MODEL_71453af887b6425cb6401ec2a4a8819b",
            "value": " 339k/339k [00:00&lt;00:00, 1.13MB/s]"
          }
        },
        "f7efc50478cb49f8bdf247ec00cd140d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f826858e94a6413783bbfdbdacee8f96": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa720d8e72654303a1dcd2073415dcbb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fc9bb5f4478e4065b468f81b57364a29": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "fd10e4d4335349b084aa1049309ba821": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fe7d790d29ff42f08a1e365d459dfa7a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d3462fa932df493c881b642f11b31e3f",
              "IPY_MODEL_7d92ea49afab43c58454588f24c45e0f",
              "IPY_MODEL_08fa21bf5efa48e58e5e44a1309ceff9"
            ],
            "layout": "IPY_MODEL_13ce282cbe8548a29b5a53e1afaa8633"
          }
        },
        "ff6a326f34644cd0ab69ac273ef0bac6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ffeedd08e56c4c2a94e1752b20e2c138": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b6f9c2501a7b4fefb989af60b240d760",
            "placeholder": "​",
            "style": "IPY_MODEL_ed8b24b4861c4c3fb6e1ad986f0ace8c",
            "value": "Generating train split: 100%"
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
